<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>旅游博客/北京（摆烂式旅游）</title>
    <url>/2024/08/11/%E6%97%85%E6%B8%B8%E5%8D%9A%E5%AE%A2/%E5%8C%97%E4%BA%AC%EF%BC%88%E6%91%86%E7%83%82%E5%BC%8F%E6%97%85%E6%B8%B8%EF%BC%89/</url>
    <content><![CDATA[<p>旅行时间：7.11-7.17（7月10号中午到北京，晚上和同学吃饭，16号休息一天）  </p>
<p> 我是在江西长大的，有一说一对北京的美食并不是很提得起兴趣，但是对于北京烤鸭我还是绝对喜欢的。来北京吃烤鸭最有名的几个如四季民福、全聚德等，四季民福比全聚德相对来说便宜（对于我这个来自小城市的人来说人均200左右也不便宜了😅），有名的京菜有紫光园（价格很实惠）  </p>
<p>总的来说玩了一个礼拜，旅游景点顺序为[奥林匹克公园（鸟巢、水立方）-&gt;故宫博物馆-&gt;颐和园-&gt;天坛公园-&gt;慕田峪长城-&gt;天安门广场]，一天一个景点，主打一个随心所欲😀，不过很多都是提前需要预约的，需要提前规划好路线。  </p>
<table>
<thead>
<tr>
<th>景点</th>
<th>预约情况</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>奥林匹克公园</td>
<td>不需要预约</td>
<td>免费</td>
</tr>
<tr>
<td>故宫博物馆</td>
<td>需要预约，并且非常难抢，可以从美团、淘宝、咸鱼等方式购买旅游团中的个人票，多花钱</td>
<td>成人票80、学生票60</td>
</tr>
<tr>
<td>颐和园</td>
<td>需要预约，很好约</td>
<td>60元</td>
</tr>
<tr>
<td>天坛公园</td>
<td>需要预约，很好约，买联合票才能去祈年殿和回音壁</td>
<td>成人票34元、学生票17元</td>
</tr>
<tr>
<td>慕田峪长城</td>
<td>需要提前买票，可以买北京旅游集散的车票，直接从前门抵达旅游景点下方</td>
<td>车票+往返缆车票200元</td>
</tr>
<tr>
<td>天安门广场</td>
<td>需要提前预约，如果想要去天安门城楼和毛主席纪念堂需要提前买票，很难抢到票</td>
<td>免费</td>
</tr>
</tbody></table>
<h2 id="7-10刚来到酒店"><a href="#7-10刚来到酒店" class="headerlink" title="7.10刚来到酒店"></a>7.10刚来到酒店</h2><p>提前订好的酒店，在北京选酒店还是件挺难的事，考虑到交通、两个人住、住的时间长等问题，最后选在在北京四环附近的飘HOME酒店，双床房靠窗，448一晚，已经算比较实惠的了。交通上在14号线将台站附近，去所有景点大概都需要一个小时的通勤时间，只能折中处理了啊😜<br>[四季民福]<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%97%85%E6%B8%B8%E5%8D%9A%E5%AE%A2/%E5%8C%97%E4%BA%AC%EF%BC%88%E6%91%86%E7%83%82%E5%BC%8F%E6%97%85%E6%B8%B8%EF%BC%89/IMG_3376.jpg"></p>
<h2 id="7-11奥林匹克公园（鸟巢、水立方）"><a href="#7-11奥林匹克公园（鸟巢、水立方）" class="headerlink" title="7.11奥林匹克公园（鸟巢、水立方）"></a>7.11奥林匹克公园（鸟巢、水立方）</h2><p>为了拍夜景也是等了好久，大概八点多才开始亮灯，不过刚好后面几天是薛之谦在鸟巢开演唱会，晚上在彩排，也是听到最近很火的DJ版好像在哪里见过你（薛之谦彩排的时候可是唱了好几遍的😆）<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%97%85%E6%B8%B8%E5%8D%9A%E5%AE%A2/%E5%8C%97%E4%BA%AC%EF%BC%88%E6%91%86%E7%83%82%E5%BC%8F%E6%97%85%E6%B8%B8%EF%BC%89/IMG_3377.jpg"></p>
<h2 id="7-12故宫博物馆"><a href="#7-12故宫博物馆" class="headerlink" title="7.12故宫博物馆"></a>7.12故宫博物馆</h2><p>刚好遇见北京下大雨的天气，也真奇了怪，北京一年下不了几次雨还让我碰到了，虽然带了伞，但还是在去故宫博物馆的路上鞋子湿透了，不过刚好碰见下雨天气正好瞧见了故宫那强悍的排水系统，不得不佩服古代人在建筑上面的智慧了。可惜是阴雨天气，故宫建筑里面很多是进不去的，光线也不好，不能很好的看到皇帝坐的椅子，也发挥不了皇帝坐在殿堂上与大臣们开会的想象了🤔。不过逛了逛旁边太后们住的地方，感受下慈禧太后的花园，还是挺有历史气息的😋。<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%97%85%E6%B8%B8%E5%8D%9A%E5%AE%A2/%E5%8C%97%E4%BA%AC%EF%BC%88%E6%91%86%E7%83%82%E5%BC%8F%E6%97%85%E6%B8%B8%EF%BC%89/IMG_3378.jpg"></p>
<h2 id="7-13颐和园"><a href="#7-13颐和园" class="headerlink" title="7.13颐和园"></a>7.13颐和园</h2><p>颐和园公园还是挺大的，主要是还有一个昆明湖，转一圈下来很考验我的双腿🦵，坐了小船，爬了小山，感受一下皇帝们的避暑娱乐的场所，还是觉得古代皇帝才是最快乐的🤣。<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%97%85%E6%B8%B8%E5%8D%9A%E5%AE%A2/%E5%8C%97%E4%BA%AC%EF%BC%88%E6%91%86%E7%83%82%E5%BC%8F%E6%97%85%E6%B8%B8%EF%BC%89/IMG_3379.jpg"></p>
<h2 id="7-14天坛公园"><a href="#7-14天坛公园" class="headerlink" title="7.14天坛公园"></a>7.14天坛公园</h2><p>天坛公园有一个很大的特色，很多老人来这休闲娱乐，这里对于60岁以上老人是免费开放的，这也导致一个问题：这个公园我去参观的时候人很多啊🥵。到祈年殿那里人特别的多，根本没有很好的拍照点；回音壁那里如果人不多吼一嗓子是真的有回声的，但是人多了就没有了，难受😭。去天坛就是为了打卡这个高考数学题上出现了几次的地方🤣<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%97%85%E6%B8%B8%E5%8D%9A%E5%AE%A2/%E5%8C%97%E4%BA%AC%EF%BC%88%E6%91%86%E7%83%82%E5%BC%8F%E6%97%85%E6%B8%B8%EF%BC%89/IMG_3380.jpg"></p>
<h2 id="7-15慕田峪长城（city不city啊）"><a href="#7-15慕田峪长城（city不city啊）" class="headerlink" title="7.15慕田峪长城（city不city啊）"></a>7.15慕田峪长城（city不city啊）</h2><p>主要是北京有两处长城的旧址：八达岭长城和慕田峪长城。也是搜集了很多攻略，看了很多评价，主要是刚好去长城是暑假中的星期一，星期一其他旅游景点闭馆，这样导致了长城的游客特别多，尤其是八达岭长城（毕竟八达岭长城比慕田峪长城更有名气），八达岭长城拍照更壮观，慕田峪长城人会更少一点，看旅游所需，由于身边带了个老人出来旅游，只爬了一下段长城（好汉坡啥的都没去），主要是为了打卡“不到长城非好汉”😋<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%97%85%E6%B8%B8%E5%8D%9A%E5%AE%A2/%E5%8C%97%E4%BA%AC%EF%BC%88%E6%91%86%E7%83%82%E5%BC%8F%E6%97%85%E6%B8%B8%EF%BC%89/IMG_3381.jpg"></p>
<h2 id="7-17天安门广场"><a href="#7-17天安门广场" class="headerlink" title="7.17天安门广场"></a>7.17天安门广场</h2><p>天安门广场给人最大的印象就是国家阅兵那浩荡的气势，广场确实很宽广，旁边就是人民大会堂和国家博物馆，前面是人民英雄纪念碑和毛主席纪念堂，再加上武警的站岗给人一种很庄严、严肃的感觉，不愧是国家首都必打卡的地方。<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%97%85%E6%B8%B8%E5%8D%9A%E5%AE%A2/%E5%8C%97%E4%BA%AC%EF%BC%88%E6%91%86%E7%83%82%E5%BC%8F%E6%97%85%E6%B8%B8%EF%BC%89/IMG_3382.jpg"></p>
<h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>旅游的时间太久了，最后还是会给人一种疲劳，不过我们一天一个旅游景点，在旅游过程中还是很养精蓄锐的，每次去到这些景点还是活气十足，人生中怎么说都要来一次首都参观，感受中国最大的魅力。</p>
]]></content>
      <categories>
        <category>旅游博客</category>
      </categories>
  </entry>
  <entry>
    <title>第一章-线性表（有时间补充含有头结点和不含有头结点的链表插入删除操作）</title>
    <url>/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E6%9C%89%E6%97%B6%E9%97%B4%E8%A1%A5%E5%85%85%E5%90%AB%E6%9C%89%E5%A4%B4%E7%BB%93%E7%82%B9%E5%92%8C%E4%B8%8D%E5%90%AB%E6%9C%89%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
    <content><![CDATA[<p>定义：具有相同数据类型的n（n&gt;=0）个数据元素的有限序列.<br><code>线性表是一种逻辑结构，表示元素之间的一对一的相邻关系。顺序表和链表是指存储结构，两者属于不同层面的概念。</code></p>
<h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>定义：线性表的顺序存储，它是用一组地址连续的存储单元依此存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。<code>逻辑顺序与物理顺序相同</code>。</p>
<h4 id="存储结构体（静态）"><a href="#存储结构体（静态）" class="headerlink" title="存储结构体（静态）"></a>存储结构体（静态）</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define MaxSize 50           //定义线性表的最大长度</span><br><span class="line">typedef struct{</span><br><span class="line">	ElemType data[MAxSize];  //顺序表的元素</span><br><span class="line">	int length;              //顺序表的当前长度</span><br><span class="line">}Sqlist;                     //顺序表的类型定义</span><br></pre></td></tr></table></figure></div>
<h4 id="存储结构体（动态）"><a href="#存储结构体（动态）" class="headerlink" title="存储结构体（动态）"></a>存储结构体（动态）</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define InitSize 100     //表长度的初始定义</span><br><span class="line">typedef struct{</span><br><span class="line">	ElemType *data;      //指示动态分配数组的指针</span><br><span class="line">	int MAxSize,length;  //数组的最大容量和当前个数</span><br><span class="line">}SeqList;                //动态分配数组顺序表的类型定义</span><br></pre></td></tr></table></figure></div>
<p><code>动态分配并不是链式存储，它同样属于顺序存储结构，物理结构没有变化，依然是随机存取方式，只是分配的空间大小可以在运行时动态决定。</code></p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li><strong>随机访问</strong>，通过首地址和元素序号可在时间O(1)内找到指定的元素；</li>
<li>存储密度高，每个节点只存储数据元素；</li>
<li>插入和删除需要移动大量元素。</li>
</ul>
<h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool ListInsert( Sqlist &amp;L,int i,ElemType e ){</span><br><span class="line">	if( i &lt; 1 || i &gt; L.length + 1)       //判断i的范围是否有效</span><br><span class="line">		return false;</span><br><span class="line">	if( L.length &gt;= MaxSize )            //当前存储空间已满，不能插入</span><br><span class="line">		return false;</span><br><span class="line">	for( int j = L.length; j &gt;= i; j--)  //将第i个元素及之后的元素后移</span><br><span class="line">		L.data[j] = L.data[j-1];</span><br><span class="line">	L.data[i-1] = e;                     //在位置i处放入e</span><br><span class="line">	L.length++;                          //线性表长度加1</span><br><span class="line">	return ture;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>平均时间复杂度为O(n)</p>
<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool ListDelete(SqList &amp;L,int i,ElemType &amp;e){</span><br><span class="line">	if(i&lt;1||i&gt;L.length)          //判断i的范围是否有效</span><br><span class="line">		return false;</span><br><span class="line">	e = L.data[i-1];             //将被删除的元素赋值给e</span><br><span class="line">	for(int j=i;j&lt;L.length;j++)  //将第i个元素后的元素前移</span><br><span class="line">		L.data[j-1] = L.data[j];</span><br><span class="line">	L.length--;                  //线性表长度减1</span><br><span class="line">	return true;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>平均时间复杂度为O(n)</p>
<h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int LocateElem(SqList L,ElemType e){</span><br><span class="line">	inty i;</span><br><span class="line">	for(i=0;i&lt;L.length;i++)</span><br><span class="line">		if(L.data[i]==e)</span><br><span class="line">			return i+1;  //下标为i的元素值等于e，返回其位序i+1</span><br><span class="line">	return 0;            //退出循环，说明查找失败</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>平均时间复杂度为O(n)</p>
<h3 id="线性表的链式表示"><a href="#线性表的链式表示" class="headerlink" title="线性表的链式表示"></a>线性表的链式表示</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>定义：线性表的链式存储，通过一组任意的存储单元来存储线性表中的数据元素。</p>
<h5 id="存储结构体"><a href="#存储结构体" class="headerlink" title="存储结构体"></a>存储结构体</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct LNode{    //定义单链表结点类型</span><br><span class="line">	ElemType data;       //数据域</span><br><span class="line">	struct LNode *next;  //指针域</span><br><span class="line">}LNode,*LinkList;</span><br></pre></td></tr></table></figure></div>
<p>头结点的优点：</p>
<ul>
<li>由于第一个数据结点的位置被存放在头结点的指针域中，因此在链表的第一个位置上的 操作和在表的其他位置上的操作一致，无须进行特殊处理。</li>
<li>无论链表是否为空，其头指针都指向头结点的非空指针（空表中头结点的指针域为空）， 因此空表和非空表的处理也就得到了统一。</li>
</ul>
<h5 id="头插法建立单链表（存在头指针）"><a href="#头插法建立单链表（存在头指针）" class="headerlink" title="头插法建立单链表（存在头指针）"></a>头插法建立单链表（存在头指针）</h5><p><code>生成链表中的节点次序和输入数据的顺序一致</code><br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E6%9C%89%E6%97%B6%E9%97%B4%E8%A1%A5%E5%85%85%E5%90%AB%E6%9C%89%E5%A4%B4%E7%BB%93%E7%82%B9%E5%92%8C%E4%B8%8D%E5%90%AB%E6%9C%89%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%EF%BC%89/List_HeadInsert.png"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LinkList List_HeadInsert(LinkList &amp;L){      //逆向建立单链表</span><br><span class="line">	LNode *s;</span><br><span class="line">	int x;</span><br><span class="line">	L = (LinkList)malloc(sizeof(LNode));    //创建头节点</span><br><span class="line">	L-&gt;next = NULL;                         //初始为空链表</span><br><span class="line">	scanf("%d",&amp;x);                         //输入节点的值</span><br><span class="line">	while(x!=9999){                         //输入9999表示结束</span><br><span class="line">		s = (LNode*)malloc(sizeof(LNode));  //创建新的节点</span><br><span class="line">		s-&gt;data = x;</span><br><span class="line">		s-&gt;next = s;                        //将新节点插入表中，L为头指针</span><br><span class="line">		scanf("%d",&amp;x);</span><br><span class="line">	}</span><br><span class="line">	return L;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>平均时间复杂度O(n)</p>
<h5 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h5><p><code>生成链表中的节点次序和输入数据的顺序一致</code><br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E6%9C%89%E6%97%B6%E9%97%B4%E8%A1%A5%E5%85%85%E5%90%AB%E6%9C%89%E5%A4%B4%E7%BB%93%E7%82%B9%E5%92%8C%E4%B8%8D%E5%90%AB%E6%9C%89%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%EF%BC%89/List_TailInsert.png"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LinkList List_TailInsert(LinkList &amp;L){  //正向建立单链表</span><br><span class="line">	int x;                              //设元素类型为整型</span><br><span class="line">	L = (LinkList)malloc(sizeof(LNode));</span><br><span class="line">	LNode *s,*r = L;                    //r为表尾指针</span><br><span class="line">	scanf("%d",&amp;x);                     //输入结点的值</span><br><span class="line">	while(x!=9999){                     //输入9999表示结束</span><br><span class="line">		s = (LNode *)malloc(sizeof(LNode));</span><br><span class="line">		s-&gt;data = x;</span><br><span class="line">		r-&gt;next = s;</span><br><span class="line">		r = s;                          //r指向新的表尾节点</span><br><span class="line">		scanf("%d,&amp;x);</span><br><span class="line">	}</span><br><span class="line">	r-&gt;next = NULL;                     //尾结点指针置空</span><br><span class="line">	return L;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>平均时间复杂度O(n)</p>
<h5 id="按序号查找结点"><a href="#按序号查找结点" class="headerlink" title="按序号查找结点"></a>按序号查找结点</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LNode *GetElem(LinkList L,int i){</span><br><span class="line">	int j=1;             //计数，初始为1</span><br><span class="line">	LNode *p = L-&gt;next;  //第一个结点指针赋给p</span><br><span class="line">	if(i==0) return L;   //若i等于0，则返回头结点</span><br><span class="line">	if(i&lt;1) return NULL; //若i无效，则返回头结点</span><br><span class="line">	while(p&amp;&amp;j&lt;i){       //从第1个节点开始找，查找第i个结点</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	}</span><br><span class="line">	return p;            //返回第i个结点的指针，若i大于表长，则返回NULL</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>平均时间复杂度O(n)</p>
<h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>由于单链表只有一个指向后继的指针，使得单链表只能从头结点依次顺序向后遍历则导致访问前驱节点只能从头遍历，时间复杂度为O(n)，为了克服这个缺点，从而引入双链表，双链表每个节点存在两个指针prior和next，分别指向前驱节点和后继节点。</p>
<h5 id="存储结构体-1"><a href="#存储结构体-1" class="headerlink" title="存储结构体"></a>存储结构体</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct DNode{           //定义双链表节点类型</span><br><span class="line">	ElemType data;              //数据域</span><br><span class="line">	struct DNode *prior,*next;  //前驱和后继指针</span><br><span class="line">}DNode,*DLinkList;</span><br></pre></td></tr></table></figure></div>
<p><code>注意：进行插入删除操作需要同时改变前驱指针和后继指针</code></p>
<h4 id="循环单链表和循环双链表"><a href="#循环单链表和循环双链表" class="headerlink" title="循环单链表和循环双链表"></a>循环单链表和循环双链表</h4><p>循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL,而改为指向头结点, 从而整个链表形成一个环。<br><code>对循环单链表设置尾指针效率会更高</code><br><code>循环双链表为空时，头结点的前驱和后继都是本身</code></p>
<h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>静态链表借助数组来描述线性表的链式存储结构（指针是结点的相对地址（数组下标），也称为游标）</p>
<h5 id="存储结构体-2"><a href="#存储结构体-2" class="headerlink" title="存储结构体"></a>存储结构体</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define MaxSize 50  //静态链表的最大长度</span><br><span class="line">typedef struct {    //静态链表结构类型的定义</span><br><span class="line">	ElemType data;  //存储数据元素</span><br><span class="line">	int next;       //下一个元素的数组下标</span><br><span class="line">}SLinkList[MaxSize];</span><br></pre></td></tr></table></figure></div>
<h3 id="顺序存储和链式存储的比较"><a href="#顺序存储和链式存储的比较" class="headerlink" title="顺序存储和链式存储的比较"></a>顺序存储和链式存储的比较</h3><ul>
<li>存取（读写方式）<ul>
<li>顺序存储：可以顺序存取，也可以随机存取；</li>
<li>链式存储：只能从表头顺序存取元素。</li>
</ul>
</li>
<li>逻辑结构与物理结构<ul>
<li>顺序存储：逻辑上相邻的元素，对应的物理存储位置也相邻 ；</li>
<li>链式存储：逻 辑上相邻的元素，物理存储位置不一定相邻，对应的逻辑关系是通过指针链接来表示的。</li>
</ul>
</li>
<li>查找、插入和删除操作<ul>
<li>顺序存储：<ul>
<li>按值查找： <ul>
<li>无序：时间复杂度O(n)</li>
<li>有序：最快时间复杂度O(log(n))</li>
</ul>
</li>
<li>按序号查找：随机访问 O(1)</li>
<li>插入、删除：平均需要移动半个表长的元素</li>
</ul>
</li>
<li>链式存储：存储密度不大，平均时间复杂度O(n) ，插入删除只需要修改相关节点的指针域。</li>
</ul>
</li>
<li>空间分配：<ul>
<li>顺序存储<ul>
<li>静态：预先分配预先大量空间 ，容易造成内存溢出；</li>
<li>动态：需要移动大量元素，操作效率降低</li>
</ul>
</li>
<li>链式存储：操作灵活高效</li>
</ul>
</li>
</ul>
<h3 id="如何选取存储结构"><a href="#如何选取存储结构" class="headerlink" title="如何选取存储结构"></a>如何选取存储结构</h3><ol>
<li>基于存储考虑：难以估计存储规模或者长度，选择链式存储；</li>
<li>基于运算考虑：根据序号查找选择顺序存储，插入删除操作选择链式存储；</li>
<li>基于环境考虑：顺序存储比较稳定，但如果需要频繁进行插入删除等操作更改元素选择链式存储（动态性较强）</li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>第四章-树</title>
    <url>/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%A0%91/</url>
    <content><![CDATA[<p>定义：有且仅有一个特定的成为根的节点，存在n（n&gt;1）个节点时，其余节点可分为m个互不相交的有限集，每个集合又是树。<br><em>树的定义是递归的，树是一种递归的数据结构，树作为一种逻辑结构，同时也是一种分层结构</em></p>
<hr>
<h1 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h1><ul>
<li>从根节点A到结点K的唯一路径上的任意节点成为K的祖先。路径上最接近结点K的结点E称为K的双亲。拥有相同双亲的节点称为兄弟。</li>
<li>树中的一个结点的孩子个数称为该结点的度，树中结点的最大度数称为树的度。</li>
<li>度大于0的结点称为分支节点；度为0的结点称为叶节点</li>
<li>结点的层次从树根开始定义，根节点为第一层，它的子结点为第2层，以此类推。双亲在同一层的结点互为堂兄弟</li>
<li>结点的深度是从根节点开始自顶向下逐层累加</li>
<li>结点的高度是从叶节点开始自底向上逐层累加</li>
<li>树中结点的各子树从左到右是有次序的，不能互换，称为有序树；反之称为无序树</li>
<li>树中两个结点之间的路径是由这两个节点之间所经过的结点序列构成的，而路径长度是路径上所经过的边的个数</li>
<li>森林是m棵互不相交的树的集合，把树的根节点删去就变成了森林</li>
</ul>
<hr>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是有序树，可以为空二叉树或者由一个根结点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树同样也必须为二叉树。<br>二叉树与度为2的有序树的区别：</p>
<ul>
<li>度为2的树至少有三个节点，而二叉树可以为空</li>
<li>度为2的有序树的孩子的左右次序是相对于另一个孩子而言的，若某个结点只有一个孩子，则这个孩子就无需区分其左右次序，而二叉树无论其孩子是否为2，均需确定其左右次序，即二叉树的结点次序不是相对于另一个节点而言的，而是确定的。</li>
</ul>
<hr>
<h2 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h2><ol>
<li>满二叉树：一棵高度为h，且含有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.137ex" height="2.117ex" role="img" focusable="false" viewbox="0 -853.7 2712.7 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g><g data-mml-node="mo" transform="translate(1212.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2212.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个结点的二叉树称为满二叉树，即树中的每层都含有最多的结点。</li>
<li>完全二叉树：高度为h、有n个结点的二叉树，当且仅当其每个结点都与高度为h的满二叉树中编号为1~n的结点一一对应。<ol>
<li>若<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.675ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3834.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mo" transform="translate(1678.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1956.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2556.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(3056.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(3556.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container>,则结点i为分支结点，否则为叶节点</li>
<li>叶结点只可能出现在层次最大的两层上出现。对于最大层次中的叶结点，则依次排列在该层最左边的位置上</li>
<li>若有度为1的结点，则只可能有一个，并且该结点只有左孩子而没有右孩子</li>
<li>按层序编号后，一旦出现某结点（编号为i）为叶结点或只有左孩子，则编号大于i的结点均为叶结点</li>
<li>若n为奇数，则每个分支节点都有左孩子和右孩子；若n为偶数，则编号最大的分支结点（编号为n/2）只有左孩子，没有右孩子，其余分支结点左、右孩子都有</li>
</ol>
</li>
<li>二叉排序树：左子树上所有结点的关键字均小于根节点的关键字；右子树上的所有结点的关键字均大于根节点的关键字；左子树和右子树又各是一棵二叉排序树</li>
<li>平衡二叉树：树上任意一个结点的左子树和右子树的深度之差不超过1</li>
</ol>
<hr>
<h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><ol>
<li>非空二叉树上的叶结点等于度为2的结点数加1，即<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="11.604ex" height="1.881ex" role="img" focusable="false" viewbox="0 -666 5129.1 831.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(1314.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2370.1,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3628.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(4629.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></li>
<li>非空二叉树第k层上至多有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.197ex" height="1.932ex" role="img" focusable="false" viewbox="0 -853.7 1855.1 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container>个结点</li>
<li>高度为h的二叉树至多有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.137ex" height="2.117ex" role="img" focusable="false" viewbox="0 -853.7 2712.7 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g><g data-mml-node="mo" transform="translate(1212.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2212.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个结点</li>
<li>对完全二叉树按从上到下、从左到右的顺序依次编号1，2，3···，n，则有以下关系：<ol>
<li>当i&gt;1时，结点i的双亲的编号为【i/2】，即当i为偶数时，其双亲的编号为i/2，它是双亲的左孩子；当i为奇数时，其双亲的编号为（i-1）/2，它是双亲的右孩子。</li>
<li>当2i<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewbox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g></g></g></svg></mjx-container>n时，结点i的左孩子编号为2i，否则无左孩子；当2i+1<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewbox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g></g></g></svg></mjx-container>n时，结点i的右孩子编号为2i+1，否则无右孩子；</li>
<li>结点i所在的层次为【<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="4.619ex" height="2.034ex" role="img" focusable="false" viewbox="0 -694 2041.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>】+1</li>
</ol>
</li>
<li>具有n个结点的完全二叉树的高度为【<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.853ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4797 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mo" transform="translate(1696.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2085.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2907.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(3908,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(4408,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>】或【<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.956ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3074.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mo" transform="translate(1696.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2085.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2685.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>】+1</li>
</ol>
<h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h2 id="二叉树的顺序存储是指用一组地址连续的存储单元依此从上而下、从左至右存储完全二叉树上的结点元素（完全二叉树和满二叉树采用顺序存储比较合适）；对于一般的二叉树，为了让数组下标能反映二叉树中结点之间的逻辑关系，只能添加一些并不存在的空结点，让其每个结点与完全二叉树上的结点相对照，再存储到一维数组的相应分量中。"><a href="#二叉树的顺序存储是指用一组地址连续的存储单元依此从上而下、从左至右存储完全二叉树上的结点元素（完全二叉树和满二叉树采用顺序存储比较合适）；对于一般的二叉树，为了让数组下标能反映二叉树中结点之间的逻辑关系，只能添加一些并不存在的空结点，让其每个结点与完全二叉树上的结点相对照，再存储到一维数组的相应分量中。" class="headerlink" title="  二叉树的顺序存储是指用一组地址连续的存储单元依此从上而下、从左至右存储完全二叉树上的结点元素（完全二叉树和满二叉树采用顺序存储比较合适）；对于一般的二叉树，为了让数组下标能反映二叉树中结点之间的逻辑关系，只能添加一些并不存在的空结点，让其每个结点与完全二叉树上的结点相对照，再存储到一维数组的相应分量中。    
  "></a>  二叉树的顺序存储是指用一组地址连续的存储单元依此从上而下、从左至右存储完全二叉树上的结点元素（完全二叉树和满二叉树采用顺序存储比较合适）；对于一般的二叉树，为了让数组下标能反映二叉树中结点之间的逻辑关系，只能添加一些并不存在的空结点，让其每个结点与完全二叉树上的结点相对照，再存储到一维数组的相应分量中。    
  </h2><pre><code>二叉链表的链式存储结构：
</code></pre>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct BiNode{</span><br><span class="line">	ElemType data;                   //数据域</span><br><span class="line">	struct BiTNode *lchild,*rchild;  //左、右孩子指针</span><br><span class="line">}BiTNode,*BiTree;</span><br></pre></td></tr></table></figure></div>
<h2 id="在含有n个结点的二叉链表中含有n-1个空链域-二叉树的遍历-先序遍历-访问根节点-先序遍历左子树-线序遍历右子树-中序遍历-中序遍历左子树-访问根节点-中序遍历右子树-后序遍历-后序遍历左子树-后序遍历右子树-访问根节点"><a href="#在含有n个结点的二叉链表中含有n-1个空链域-二叉树的遍历-先序遍历-访问根节点-先序遍历左子树-线序遍历右子树-中序遍历-中序遍历左子树-访问根节点-中序遍历右子树-后序遍历-后序遍历左子树-后序遍历右子树-访问根节点" class="headerlink" title="在含有n个结点的二叉链表中含有n+1个空链域# 二叉树的遍历## 先序遍历+ 访问根节点+ 先序遍历左子树+ 线序遍历右子树## 中序遍历+ 中序遍历左子树+ 访问根节点+ 中序遍历右子树## 后序遍历+ 后序遍历左子树+ 后序遍历右子树+ 访问根节点"></a><code>在含有n个结点的二叉链表中含有n+1个空链域</code><br># 二叉树的遍历<br>## 先序遍历<br>+ 访问根节点<br>+ 先序遍历左子树<br>+ 线序遍历右子树<br><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void PreOrder(BiTree T){</span><br><span class="line">	if(T!=NULL){</span><br><span class="line">		visit(T);             //访问根节点</span><br><span class="line">		PreOrder(T-&gt;lchild);  //递归遍历左子树</span><br><span class="line">		PreOrder(T-&gt;rchild);  //递归遍历右子树</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><br><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 非递归实现 */</span><br><span class="line">void PreOrder(BiTree T){</span><br><span class="line">	InitStack(S);          //初始化栈S</span><br><span class="line">	BiTree p=T;            //p是遍历指针</span><br><span class="line">	while(p||IsEmpty(S)){  //栈不空或p不空时循环</span><br><span class="line">		if(p){             //一路向左</span><br><span class="line">			visit(p);      </span><br><span class="line">			Push(S,p);     //当前节点入栈</span><br><span class="line">			p=p-&gt;lchild;   //左孩子不空，一直向左走</span><br><span class="line">		}</span><br><span class="line">		else{              //出栈，并转向出栈结点的右子树</span><br><span class="line">			Pop(S,p);      //栈顶元素出栈，访问出栈结点</span><br><span class="line">			p=p-&gt;rchild;   //向右子树走，p赋值为当前节点的右孩子</span><br><span class="line">			//返回while循环继续进入if语句</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><br>## 中序遍历<br>+ 中序遍历左子树<br>+ 访问根节点<br>+ 中序遍历右子树<br><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void InOrder(BiTree T){</span><br><span class="line">	if(T!=NULL){</span><br><span class="line">		InOrder(T-&gt;lchild);  //递归遍历左子树</span><br><span class="line">		visit(T);            //访问根节点</span><br><span class="line">		InOrder(T-&gt;rchild);  //递归遍历右子树</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><br><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 非递归实现 */</span><br><span class="line">void InOrder(BiTree T){</span><br><span class="line">	InitStack(S);          //初始化栈S</span><br><span class="line">	BiTree p=T;            //p是遍历指针</span><br><span class="line">	while(p||IsEmpty(S)){  //栈不空或p不空时循环</span><br><span class="line">		if(p){             //一路向左</span><br><span class="line">			Push(S,p);     //当前节点入栈</span><br><span class="line">			p=p-&gt;lchild;   //左孩子不空，一直向左走</span><br><span class="line">		}</span><br><span class="line">		else{              //出栈，并转向出栈结点的右子树</span><br><span class="line">			Pop(S,p);      //栈顶元素出栈，访问出栈结点</span><br><span class="line">			visit(p);      //向右子树走，p赋值为当前节点的右孩子</span><br><span class="line">			p=p-&gt;rchild;   //返回while循环继续进入if语句</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><br>## 后序遍历<br>+ 后序遍历左子树<br>+ 后序遍历右子树<br>+ 访问根节点<br><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void PostOrder(BiTree T){</span><br><span class="line">	if(T!=NULL){</span><br><span class="line">		PostOrder(T-&gt;lchild);  //递归遍历左子树</span><br><span class="line">		PostOrder(T-&gt;rchild);  //递归遍历右子树</span><br><span class="line">		visit(T);              //访问根节点</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><br><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 非递归实现 */</span><br><span class="line">void PostOrder(BiTree T){</span><br><span class="line">	InitStack(S);</span><br><span class="line">	BiTNode *p=T;</span><br><span class="line">	BiTNode *r=NULL;</span><br><span class="line">	while(p||!IsEmpty(S)){</span><br><span class="line">		if(p){                           //走到最左边</span><br><span class="line">			push(S,p);</span><br><span class="line">			p=p-&gt;lchild;</span><br><span class="line">		}</span><br><span class="line">		else{                            //向右</span><br><span class="line">			GetTop(S,p);                 //读栈顶结点</span><br><span class="line">			if(p-&gt;rchild&amp;&amp;p-&gt;rchild!=r)  //若右子树存在，且未被访问过</span><br><span class="line">				p=p-&gt;rchild;             //转向右</span><br><span class="line">			else{                        //否则弹出节点并访问</span><br><span class="line">				pop(S,p);                //将结点弹出</span><br><span class="line">				visit(p-&gt;data);          //访问该节点</span><br><span class="line">				r=p;                     //记录最近访问过的节点</span><br><span class="line">				p=NULL;                  //节点访问完，重制p指针</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></h2><p>以上三种遍历方式时间复杂度O(n)，空间复杂度O(n)<br><code>由先序遍历和中序遍历序列可以确定一棵二叉树，由后序遍历和中序遍历序列可以确定一棵二叉树，由层序遍历和中序遍历可以确定一棵二叉树。先序遍历和后序遍历无法确定一棵二叉树</code></p>
<h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>第三章-串</title>
    <url>/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E4%B8%B2/</url>
    <content><![CDATA[<p>定义：由零个或多个字符组成的有限序列。记为S=‘a1a2······an’，n=0时称为空串。<br>串中任意多个连续的字符组成的子序列称为该串的<code>子串</code>，包含子串的串称为<code>主串</code>。<br>当两个串的长度相等且每个对应位置的字符都相等时，称两个串是相等的。<br><code>串的逻辑结构和线性表极为相似，区别仅在于串的数据对象限定为字符集。</code></p>
<h3 id="串的存储结构"><a href="#串的存储结构" class="headerlink" title="串的存储结构"></a>串的存储结构</h3><h4 id="定长顺序存储表示"><a href="#定长顺序存储表示" class="headerlink" title="定长顺序存储表示"></a>定长顺序存储表示</h4><p>用一组地址连续的存储单元来存储串值的字符序列。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define MAXLEN 255    //预定义最大串长为255</span><br><span class="line">typedef struct{</span><br><span class="line">	char ch[MAXLEN];  //每个分量存储一个字符</span><br><span class="line">	int length;       //串的实际长度</span><br><span class="line">}SString</span><br></pre></td></tr></table></figure></div>
<p>串的实际长度只能小于或等于MAXLEN，超过预定义长度的串值会被舍去，称为<code>截断</code>.</p>
<h4 id="堆分配存储表示"><a href="#堆分配存储表示" class="headerlink" title="堆分配存储表示"></a>堆分配存储表示</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct{</span><br><span class="line">	char *ch;     //按串长分配存储区，ch指向串的基地址</span><br><span class="line">	int length;   //串的长度</span><br><span class="line">}HString</span><br></pre></td></tr></table></figure></div>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul>
<li>StrAssign (&amp;T, chars):赋值操作。把串T赋值为 chars。</li>
<li>StrCopy (&amp;T,S):复制操作。由串S复制得到串T。</li>
<li>StrEmpty (S):判空操作。若S为空串，则返回TRUE,否则返回FALSE。</li>
<li>StrCompare (S,T):比较操作。若S&gt;T,则返回值=0；若S=T,则返回值=0；若S&lt;T, 则返回值&lt;0。</li>
<li>StrLength (S):求串长。返回串S的元素个数。</li>
<li>SubString (&amp;Sub, S, pos, len):求子串。用Sub返回串S的第pos个字符起长度为 len的子串。</li>
<li>Concat (&amp;T,S1,S2)：串联接。用T返回由S1和S2联接而成的新串。</li>
<li>Index(S,T):定位操作。若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置；否则函数值为0。</li>
<li>ClearString (&amp;S):清空操作。将S清为空串。</li>
<li>DestroyString (&amp; S)：销毁串。将串 S 销毁。</li>
</ul>
<h3 id="简单模式匹配"><a href="#简单模式匹配" class="headerlink" title="简单模式匹配"></a>简单模式匹配</h3><p>子串的定位操作通常称为串的模式匹配，他求的是子串（模式串）在主串中的位置，以下给出暴力匹配算法。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Index(SString S,SString T){</span><br><span class="line">	int i=1,j=1;</span><br><span class="line">	while(i&lt;=S.length &amp;&amp; j&lt;=T.length){</span><br><span class="line">		if(S.ch[i] == T.ch[j]){</span><br><span class="line">			++i;++j;</span><br><span class="line">		}</span><br><span class="line">		else{</span><br><span class="line">			i=i-j+2;j=1</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	if(j&gt;T.length) return i-T.length;</span><br><span class="line">	else return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//得到部分匹配表next[]</span><br><span class="line">void get_next(SString T,int next[]){</span><br><span class="line">	int i=1,j=0;                     //i是字符串遍历索引；j是与后缀匹配长度的索引</span><br><span class="line">	next[1]=0;</span><br><span class="line">	while(i&lt;T.length){</span><br><span class="line">		if(j==0||T.ch[i] == T.ch[j]){//先评判前面是否存在匹配长度，不存在则i所指的位置的匹配长度j重新回到头部位置；若存在则继续评判该i位置元素是否与前面匹配成功的长度的位置j元素是否相等，如果相等，则i下一个元素的后缀匹配长度为j，但是部分匹配成功索引需要对该长度位置的下一个位置进行比对，所以next对应的元素应该为长度加1；不相等，则回到成功匹配长度位置所对应的next元素进行比对。</span><br><span class="line">			++i;++j;</span><br><span class="line">			next[i]=j;</span><br><span class="line">		}else{</span><br><span class="line">			j=next[j];</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Index_KMP(SString S,SString T,int next[]){</span><br><span class="line">	int i=1,j=1;</span><br><span class="line">	while(i&lt;=S.length&amp;&amp;j&lt;=T.length){</span><br><span class="line">		if(j==0||S.ch[i]==T.ch[i]){</span><br><span class="line">			++i;++j;</span><br><span class="line">		}else{</span><br><span class="line">			j=next[j];</span><br><span class="line">		}</span><br><span class="line">		if(j&gt;T.length) return i-T.length;</span><br><span class="line">		else return 0;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>KMP算法时间复杂度为O(m+n),KMP算法仅在主串与子串有很多“部分匹配”是才显得比普通算法快得多</p>
<h3 id="KMP算法优化"><a href="#KMP算法优化" class="headerlink" title="KMP算法优化"></a>KMP算法优化</h3><p>当相同字符在字符串中连续不间断出现很多次时，需要改进next数组，只需要添加多一个判断进行判断当前位置是否与匹配长度位置是否相等。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void get_nextval(SString T,int nextval[])</span><br><span class="line">{</span><br><span class="line">	int i=1;j=0;</span><br><span class="line">	nextval[1]=0;</span><br><span class="line">	while(i&lt;T.length){</span><br><span class="line">		if(j==0||T.ch[i]==T.ch[j]){</span><br><span class="line">			++i;++j;</span><br><span class="line">			if(T.ch[i]!=T.ch[j]) nextval[i]=j;</span><br><span class="line">			else nextval[i]=nextval[j];</span><br><span class="line">		}</span><br><span class="line">		else{</span><br><span class="line">			j=nextval[j];</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络体系结构</title>
    <url>/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><strong>计算机网络</strong>：是一个将众多分散的、自治的计算机系统，通过通信设备与线路连接，有功能完整的软件实现资源共享和信息传递的系统。<br><strong>互连网</strong>：可以把两个或多个计算机网络互相连接起来，形成更大的计算机网络。<code>任意协议</code><br><strong>互联网（Internet）</strong>：由各大ISP（Internet Service Provider）和国际机构组建的，覆盖全球范围的互连网。<code>TCP/IP协议</code><br><code>家用路由器=路由器+交换机+其他功能</code></p>
<h2 id="计算机网络组成"><a href="#计算机网络组成" class="headerlink" title="计算机网络组成"></a>计算机网络组成</h2><ul>
<li>从组成部分来看：<ul>
<li>硬件：<ul>
<li>主机</li>
<li>通信链路</li>
<li>交互设备</li>
<li>通信处理机</li>
<li>······</li>
</ul>
</li>
<li>软件：方便用户使用，实现资源共享</li>
<li>协议：规定了计算机网络中的通信规则，由硬件、软件共同实现。</li>
</ul>
</li>
<li>从工作方式来看：<ul>
<li>边缘部分：<ul>
<li>工作方式：直接为用户服务</li>
<li>主要由连接到互联网上的主机及其软件组成</li>
</ul>
</li>
<li>核心部分：<ul>
<li>工作方式：为边缘部分提供服务</li>
<li>由大量网络和连接这些网络的路由器组成</li>
</ul>
</li>
</ul>
</li>
<li>从逻辑功能来看：<ul>
<li>通信子网：<ul>
<li>计算机网络中负责计算机间信息信息传输的部分。即把计算机和其他用户装置互联在一起的所有通信设备和介质的总称</li>
<li>主要由通信链路+通信设备+协议构成</li>
</ul>
</li>
<li>资源子网：<ul>
<li>计算机网络运行应用程序，向用户提供可共享的硬件、软件和信息资源的部分</li>
<li>主要由连接到互联网上的主机组成</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h2><ul>
<li>资源共享：<ul>
<li>硬件资源共享</li>
<li>软件资源共享</li>
<li>数据资源共享</li>
</ul>
</li>
<li>数据通信：实现计算机之间的数据传输。<em>最基本最重要的功能</em></li>
<li>分布式处理：将某个复杂任务分配给网络中多台计算机处理</li>
<li>提高可靠性：网络中各台计算机互为替代机</li>
<li>负载均衡：将工作任务均衡地分配给计算机网络中的各台计算机</li>
<li>还可以实现电子化办公与服务、远程教育、娱乐等功能</li>
</ul>
<h2 id="电路交换、报文交换与分组交换"><a href="#电路交换、报文交换与分组交换" class="headerlink" title="电路交换、报文交换与分组交换"></a>电路交换、报文交换与分组交换</h2><p><strong>电路交换</strong>：通过物理线路的连接，动态地分配传输线路资源<br>优点：</p>
<ul>
<li>通信钱从主叫端到被叫端建立一条专用的物理线路，在通信的全部时间内，两个用户始终占用端到端的线路资源。数据直送，传输速率高。<code>更适用于：低频次、大量地传输数据</code></li>
</ul>
<p>缺点：</p>
<ul>
<li>建立/释放连接，需要额外的时间开销</li>
<li>线路被通信双方独占，利用率低</li>
<li>线路分配的灵活性差</li>
<li>交换节点不支持“差错控制”（无法发现传输过程中发生的数据错误）</li>
</ul>
<p><strong>报文交换</strong>：存储转发交换<br>优点：</p>
<ul>
<li>通信前无需建立连接</li>
<li>数据以“报文”为单元被交换节点间“存储转发”，通信线路可以灵活分配</li>
<li>在通信时间内，两个用户无需独占一整条物理线路。相比于电路交换，线路利用率高</li>
<li>支持“差错控制”（通过校验技术）</li>
</ul>
<p>缺点：</p>
<ul>
<li>报文不定长，不方便存储管理</li>
<li>长报文的·存储转发时间开销大、缓存开销大</li>
<li>长报文容易出错，重传的代价高</li>
</ul>
<p><strong>分组交换</strong>：将用户的信息划分为一定长度的数据分组，然后在分组数据上加上控制信息和地址，然后经过分组交换机发送到目的地址。<br>优点：</p>
<ul>
<li>通信前无需建立连接</li>
<li>数据以“分组”为单元被交换结点间“存储转发”，通信线路可以灵活分配</li>
<li>在通信时间内，两个用户无需独占一整条物理线路。相比于电路交换，线路利用率高</li>
<li>支持“差错控制”（通过校验技术）</li>
</ul>
<p>改进问题：（相对于报文交换）</p>
<ul>
<li>分组定长，方便存储转发管理</li>
<li>分组的存储转发时间开销小、缓存开销小</li>
<li>分组不易出错、重传代价低</li>
</ul>
<p>缺点：</p>
<ul>
<li>控制信息占比增加（）</li>
<li>存在转发时延</li>
<li>报文被拆分成多个分组，传输过程中可能出现失序、丢失等问题，增加处理的复杂度<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/Three_Net.png"></li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>电路交换</th>
<th>报文交换交换</th>
<th>分组交换</th>
</tr>
</thead>
<tbody><tr>
<td>完成传输所需时间</td>
<td>最少</td>
<td>最多</td>
<td>较少</td>
</tr>
<tr>
<td>存储转发时延</td>
<td>无</td>
<td>较高</td>
<td>较低</td>
</tr>
<tr>
<td>通信前是否需要建立连接</td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>缓存开销</td>
<td>无</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>是否支持差错控制</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>报文数据是否有序到达</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>是否需要额外的控制信息</td>
<td>否</td>
<td>是</td>
<td>是（控制信息占比较大）</td>
</tr>
<tr>
<td>线路分配的灵活性</td>
<td>不灵活</td>
<td>灵活</td>
<td>非常灵活</td>
</tr>
<tr>
<td>线路利用率</td>
<td>低</td>
<td>高</td>
<td>非常高</td>
</tr>
</tbody></table>
<h2 id="计算机网路的分类"><a href="#计算机网路的分类" class="headerlink" title="计算机网路的分类"></a>计算机网路的分类</h2><ul>
<li>按分布范围分类：<ul>
<li>广域网（WAN）：一般跨国跨省</li>
<li>城域网（MAN）：跨城市，常采用“以太网技术”</li>
<li>局域网（LAN）：跨学校/企业/工作单位/家庭，<strong>“以太网技术”</strong></li>
<li>个域网（PAN）：个人家庭使用，经常被称为“无线个域网”</li>
</ul>
</li>
<li>按传输技术分类：<ul>
<li>广播式网络：当一台计算机发送数据分组时，广播范围内所有计算机都会收到该分组，并通过检查分组的目的地址决定是否接受该分组</li>
<li>点对点网络：数据只会从发送方“点对点”发到接收方，精准送达</li>
</ul>
</li>
<li>按拓扑结构：<ul>
<li>总线型结构：数据”广播式“传输；存在”总线争用“</li>
<li>环形结构：数据”广播式“传输；通过”令牌“解决总线争用问题，令牌顺环形依次传递，拿到令牌者可使用总线</li>
<li>星型结构：由中央设备实现数据的”点对点“传输，不存在”总线争用“问题</li>
<li>网状结构：数据通过各中间节点逐一存储转发，属于”点到点“传输，常见于”广域网“，灵活、可靠性高但是复杂性也高</li>
</ul>
</li>
<li>按使用者分类：<ul>
<li>公用网：向公众开放的网络</li>
<li>专用网：仅供某个组织内部使用的网络</li>
</ul>
</li>
<li>按传输介质分类：有线网络、无线网络</li>
</ul>
<h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><p>定义：指连接到网络上的节点在信道上传输数据的速率。也称<strong>数据率或比特率、数据传输速率</strong><br>单位：bits/s,b/s或者bps（比特每秒）(1B = 8b)<em>以1000作为横跨单位</em><br>信道：表示某一方向传送信息的通道（信道<strong>不等于</strong>通信线路），一条信道线路在逻辑上往往对应一条发送信道和一条接受信道  </p>
<h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>定义：某信道所能传送的最高数据率（其他含义：表示某信道允许通过的信号频带范围）<br>单位：bps（b/s、bit/s）</p>
<h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>定义：指单位时间内通过某个网络（或信道、接口）的实际数据量。<br>吞吐量受带宽限制、受复杂的网络负载情况影响</p>
<h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>定义：指数据（一个报文或分组，甚至比特）从网络的一端传送到另一端所需的时间。有时也被称为延迟或迟延<br><strong>总时延=发送时延+传播时延+处理时延+排队时延</strong><br>传输（发送）时延：节点将数据推向信道所花时间 =<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex;" xmlns="http://www.w3.org/2000/svg" width="12.005ex" height="3.607ex" role="img" focusable="false" viewbox="0 -1047.1 5306.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(562.6,516.8) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">长</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(4000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4389,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(4818,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5163,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(5524,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">发</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">送</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">速</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mo" transform="translate(4000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4389,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(4818,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5163,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5524,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(6024,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(6493,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><rect width="5066.3" height="60" x="120" y="220"/></g></g></g></svg></mjx-container><br>传播时延：电磁波在信道中传播一定的距离所花的时间=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex;" xmlns="http://www.w3.org/2000/svg" width="26.347ex" height="3.527ex" role="img" focusable="false" viewbox="0 -1011.8 11645.5 1558.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(3391,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">道</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">长</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(5000,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5878,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">电</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">磁</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">波</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">洗</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">脑</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">传</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">播</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">速</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(13000,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(13878,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(14378,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(14847,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g><rect width="11405.5" height="60" x="120" y="220"/></g></g></g></svg></mjx-container><br>处理时延：被路由器处理所花的时间<br>排队时延：数据排队进入，排队发出路由器所花的时间<br><code>处理时延与排队时延受网络负载、路由器性能等诸多因素影响</code>  </p>
<h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><p><em><strong>时延带宽积=传播时延*带宽</strong></em><br>定义：一条链路中，已从发送端发出但尚未达到接收端的最大比特数</p>
<h3 id="往返时延"><a href="#往返时延" class="headerlink" title="往返时延"></a>往返时延</h3><p>（RTT）定义：表示从发送方发送完数据，到发送方收到来自接收方的确认总共经历的时间<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/RTT.png">  </p>
<h3 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h3><p>定义：某个信道有百分之多少的时间是有数据通过的<br>信道利用率=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="29.437ex" height="3.447ex" role="img" focusable="false" viewbox="0 -1011.8 13010.9 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(3677,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">通</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">过</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">通</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">过</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(8000,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(8778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">没</text></g><g data-mml-node="mi" transform="translate(9778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(10778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(11778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(12778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">通</text></g><g data-mml-node="mi" transform="translate(13778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">过</text></g><g data-mml-node="mi" transform="translate(14778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(15778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(16778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="12770.9" height="60" x="120" y="220"/></g></g></g></svg></mjx-container><br><code>信道利用率太高说明网络拥塞；太低说明浪费资源</code></p>
<h2 id="计算机分层"><a href="#计算机分层" class="headerlink" title="计算机分层"></a>计算机分层</h2><p>ISO提出OSI参考模型（法律上的标准）：物理层、数据链路层、网络层、运输层、会话层、表示层、应用层；<br>ARPANET提出TCP/IP模型：网络接口层、网际层、传输层、应用层<br><strong>教学用的模型：物理层、数据链路层、网络层、传输层、应用层</strong><br>网络的体系结构：计算机网络的各层及其协议的集合，就是这个计算机网络及其构件所应完成的精确定义<br><code>服务的作用方向为垂直的，协议的方向是水平的</code><br>协议数据单元（PDU）：对等层次之间传送的数据单位<br>服务数据单元（SDU）：为完成上一层实体所要求的功能而传送的数据<br>协议控制信息（PCI）：控制协议操作的信息<br>n-SDU+n-PCI = n-PDU=(n-1)-SDU<br>协议由语法、语义和同步三部分组成  </p>
<ul>
<li>语法：数据与控制信息的格式</li>
<li>语义：即需要发出何种控制信息、完成何种动作及做出何种应答。</li>
<li>同步：执行各种操作的条件、时序关系等，即事件实现顺序的详细说明。</li>
</ul>
<h3 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h3><p>物理层任务：实现相邻节点之间的比特传输<br>链路层任务：确保相邻节点之间的链路逻辑上无差错（差错控制、流量控制、物理寻址）<br>网络层任务：把”分组“从源节点转发到目的节点（路由选择、分组转发、拥塞控制、网际互联、差错控制、流量控制、连接建立与释放、可靠传输管理······）<br>传输层任务：实现端到端通信（复用和分用）<br>会话层任务：管理进程间会话  （会话管理）<br>表示层任务：解决不同主机上信息表示不一致的问题  （数据格式转换）<br>应用层任务：实现特定的网络应用<br> <code>网络层向上层提供有连接可靠的服务（虚电路）无连接不可靠服务（数据报）</code><br> <code>OSI传输层向上提供有连接可靠的服务</code></p>
<h3 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h3><p>网络接口层：为网络层传输”分组“，<em>未具体描述网络接口层的功能、协议</em><br>应用层：将OSI模型中的会话层、表示层、应用层的任务集合在应用层中<br>网络层：路由选择、分组转发、拥塞控制、网际互联<br>传输层：复用和分用、差错控制、流量控制、连接建立与释放、可靠传输管理<br><code>网络层向上层提供无连接不可靠服务（数据报）</code><br> <code>TCP/IP传输层向上提供有连接可靠的服务（TCP）无连接不可靠服务（UDP）</code></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>服务访问点（SAP）：在同一系统中相邻两层的实体交换信息的逻辑接口。<em>用于区分不同的服务类型</em><br>数据链路层的SAP：<strong>帧的“类型”字段</strong><br>网络层的SAP：<strong>IP数据报的“协议”字段</strong><br>传输层的SAP：<strong>“端口号”字段</strong><br>应用层的SAP：<strong>“用户接口”</strong>  </p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>第二章-栈、队列和数组</title>
    <url>/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>定义：只允许在一端进行插入或删除操作的 <strong>线性表</strong><br><code>n个不同元素进栈，出战元素不同排列个数为</code><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex;" xmlns="http://www.w3.org/2000/svg" width="7.565ex" height="2.869ex" role="img" focusable="false" viewbox="0 -864.9 3343.8 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><rect width="1527.9" height="60" x="120" y="220"/></g><g data-mml-node="msubsup" transform="translate(1767.9,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(845.3,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(748,-295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container></p>
<h4 id="顺序存储结构体"><a href="#顺序存储结构体" class="headerlink" title="顺序存储结构体"></a>顺序存储结构体</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define MaxSize 50           //定义栈中元素的最大个数</span><br><span class="line">typedef struct{</span><br><span class="line">	Elemtype data[MaxSize];  //存放栈中元素</span><br><span class="line">	int top;                 //栈顶元素</span><br><span class="line">}SqStack;</span><br></pre></td></tr></table></figure></div>
<p><code>后进先出（Last In First Out，LIFO）</code></p>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul>
<li>InitStack(&amp;S):初始化空栈</li>
<li>StackEmpty(S):判断栈是否为空，空返回true</li>
<li>Push(&amp;S,x)：进栈，若栈S未满，则将x加入使之成为新栈顶。</li>
<li>Pop(&amp;S,&amp;x)：岀栈，若栈S非空，则弹出栈顶元素，并用x返回。</li>
<li>GetTop (S, &amp;x):读栈顶元素，若栈S非空，则用x返回栈顶元素。</li>
<li>DestroyStack(&amp;S)：销毁栈，并释放栈S占用的存储空间</li>
</ul>
<h4 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h4><p>让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸。<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/shareStack.png"><br><code>共享栈是为了更有效地利用存储空间，两个栈的空间相互调节，只有在整个存储空间被占满 时才发生上溢。</code></p>
<h4 id="链式存储结构体"><a href="#链式存储结构体" class="headerlink" title="链式存储结构体"></a>链式存储结构体</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct LinkNode{</span><br><span class="line">	ElemType data;          //数据域</span><br><span class="line">	struct Linknode *next;  //指针域</span><br><span class="line">}*LiStack;                  //栈类型定义</span><br></pre></td></tr></table></figure></div>
<p><code>链栈的优点是便于多个栈共享存储空间和提高其效率，且不存 在栈满上溢的情况。</code></p>
<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>定义：只允许在表的一端进行插入，而在表的另一端进行删除的线性表。<br><code>先进先出（First In First Out，FIFO）</code><br><code>栈和队列具有相同的逻辑结构，都是线性表。</code>  </p>
<h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><ul>
<li>InitQueue (&amp;Q):初始化队列，构造一个空队列Q。</li>
<li>QueueEmpty (Q)：判队列空，若队列Q为空返回true,否则返回false。</li>
<li>EnQueue (&amp;Q, x)：入队，若队列Q未满，将x加入，使之成为新的队尾。</li>
<li>DeQueue (&amp;Q, &amp;x):岀队，若队列Q非空，删除队头兀素，并用x返回。</li>
<li>GetHead(Q,&amp;x)：读队头元素，若队列Q非空，则将队头元素赋值给x。</li>
</ul>
<h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define MaxSize 50</span><br><span class="line">typedef struct {</span><br><span class="line">	ElemType data[MaxSize];  //用数组存放队列元素</span><br><span class="line">	int front,rear;          //队头指针和队尾指针</span><br><span class="line">}SqQueue;</span><br></pre></td></tr></table></figure></div>
<p><strong>队列判空条件：Q.rear == Q.front == 0  但不能用Q.rear == MaxSize</strong></p>
<h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p>定义：存储队列元素的表从逻辑上视为一个环<br><code>当队首指针Q.front=MaxSize-l后，再前进一个位置就自动到0,这可以利用除法取余运算(％)来实现。</code><br>队空条件：Q.front == Q.rear<br>判断队空还是队满的处理方式：</p>
<ul>
<li>牺牲一个单元来区分队空和队满，入队时少用一个队列单元，这是一种较为普遍的做法, 约定以“队头指针在队尾指针的下一位置作为队满的标志”<ul>
<li>队满条件：(Q. rear+1) %MaxSize == Q. fro nt。</li>
<li>队空条件仍：Q. front == Q.rear。</li>
<li>队列中元素的个数：(Q. rear-Q.front+MaxSize) % MaxSize。</li>
</ul>
</li>
<li>类型中增设表示元素个数的数据成员。这样，队空的条件为Q. size== 0；队满的条件为 Q. size == MaxSize。这两种情况都有 Q. front == Q.rear。</li>
<li>类型中增设tag数据成员，以区分是队满还是队空。tag等于0时，若因删除导致 Q. front == Q. rear,则为队空；tag等于1时，若因插入导致Q. front == Q. rear, 则为队满。</li>
</ul>
<h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct LinkNode{  //链式队列结点</span><br><span class="line">	ElemType data;</span><br><span class="line">	struct LinkNode *next;</span><br><span class="line">}LinkNode;</span><br><span class="line">typedef struct {            //链式队列</span><br><span class="line">	LinkNOde *front,*rear;  //队列的对头和队尾指针</span><br><span class="line">}LinkQueue;</span><br></pre></td></tr></table></figure></div>
<p><code>用单链表表示的链式队列特别适合于数据元素变动比较 大的情形，而且不存在队列满且产生溢出的问题。</code></p>
<h4 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h4><p>定义：允许两端都可以进行入队和出队操作的队列。其元素的逻辑结构仍是线性结构。将队列的两端分别称为前端和后端，两端都可以入队和出队。</p>
<ul>
<li>输出受限的双端队列：允许在一端进行插入和删除，但在另一端只允许插入的双端队列称为 输出受限的双端队列；</li>
<li>输入受限的双端队列：允许在一端进行插入和删除，但在另一端只允许删除的双端队列称为 输入受限的双端队列</li>
</ul>
<h1 id="栈的括号匹配应用"><a href="#栈的括号匹配应用" class="headerlink" title="栈的括号匹配应用"></a>栈的括号匹配应用</h1><p>算法思路：</p>
<ol>
<li>初始设置一个空栈，顺序读入括号。</li>
<li>若是左括号，则存入栈中；</li>
<li>若是右括号，则先检查栈顶的括号是否于其匹配，若匹配，则弹栈；若不匹配，直接输出不合法；直到栈空。</li>
</ol>
<h1 id="栈在表达式求值中的应用"><a href="#栈在表达式求值中的应用" class="headerlink" title="栈在表达式求值中的应用"></a>栈在表达式求值中的应用</h1><p>基本思路：先将中缀表达式转换为后缀表达式，再对后缀表达式求值。</p>
<h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><ol>
<li>初始两个栈，一个栈op用于存储运算符号，一个栈存储后缀表达式</li>
<li>遍历中缀表达式<ol>
<li>遇到操作符，直接存入后缀表达式栈中；</li>
<li>遇到括号界限符，左括号直接加入操作符栈中，遇到右括号将操作符栈中的左括号以上的运算符依次弹出至后缀表达式栈中；</li>
<li>遇到操作符，比对栈顶运算符，如若栈顶运算符优先级更高（除括号界限符），则从栈顶开始，依此弹出栈中优先级高于或等于当前运算符的所有运算符至后缀表达式栈中，再将该运算符压入后缀表达式栈中；否则直接该运算符压入后缀表达式栈中。</li>
</ol>
</li>
</ol>
<table>
<thead>
<tr>
<th align="right">待处理序列</th>
<th>op栈</th>
<th>后缀表达式</th>
<th>扫描项</th>
<th>操作说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right">A+B*(C-D)-E/F</td>
<td></td>
<td></td>
<td>A</td>
<td>A加入中缀表达式</td>
</tr>
<tr>
<td align="right">+B*(C-D)-E/F</td>
<td></td>
<td>A</td>
<td>+</td>
<td>+压入op栈</td>
</tr>
<tr>
<td align="right">B*(C-D)-E/F</td>
<td>+</td>
<td>A</td>
<td>B</td>
<td>B加入中缀表达式</td>
</tr>
<tr>
<td align="right">*(C-D)-E/F</td>
<td>+</td>
<td>AB</td>
<td>*</td>
<td>*优先级高于栈顶，* 压入op栈</td>
</tr>
<tr>
<td align="right">(C-D)-E/F</td>
<td>+*(</td>
<td>AB</td>
<td>(</td>
<td>(直接入栈</td>
</tr>
<tr>
<td align="right">C-D)-E/F</td>
<td>+*(</td>
<td>AB</td>
<td>C</td>
<td>C加入中缀表达式</td>
</tr>
<tr>
<td align="right">-D)-E/F</td>
<td>+*(</td>
<td>ABC</td>
<td>-</td>
<td>栈顶为(,-压入op栈</td>
</tr>
<tr>
<td align="right">D)-E/F</td>
<td>+*(-</td>
<td>ABC</td>
<td>D</td>
<td>D加入中缀表达式</td>
</tr>
<tr>
<td align="right">)-E/F</td>
<td>+*(-</td>
<td>ABCD</td>
<td>)</td>
<td>遇到)，弹出-，删除(</td>
</tr>
<tr>
<td align="right">-E/F</td>
<td>+*</td>
<td>ABCD-</td>
<td>-</td>
<td>-优先级低于栈顶，依此弹出*、+，-加入中缀表达式</td>
</tr>
<tr>
<td align="right">E/F</td>
<td>-</td>
<td>ABCD-*+</td>
<td>E</td>
<td>E加入中缀表达式</td>
</tr>
<tr>
<td align="right">/F</td>
<td>-</td>
<td>ABCD-*+E</td>
<td>/</td>
<td>/优先级高于栈顶，/压入op栈</td>
</tr>
<tr>
<td align="right">F</td>
<td>-/</td>
<td>ABCD-*+E</td>
<td>F</td>
<td>F加入中缀表达式</td>
</tr>
<tr>
<td align="right"></td>
<td>-/</td>
<td>ABCD-*+EF</td>
<td></td>
<td>扫描完毕，弹出op栈中所有元素</td>
</tr>
<tr>
<td align="right"></td>
<td></td>
<td>ABCD-*+EF/-</td>
<td></td>
<td>结束</td>
</tr>
</tbody></table>
<h2 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h2><p><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/calculate.png"><br><code>队列在计算机系统的作用：第一个方面是解决主机与外部设备之间速度不匹配的问题，第二个方面是解决由多用户引起的资源竞争问题。</code></p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><code>数组与线性表的关系：数组是线性表的推广</code></p>
<h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>一维数组A[0···n-1]存储结构关系式:<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="38.919ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 17202.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(1444,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(2204,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(2593,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(3449,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4115.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(5171.5,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(5852.5,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(6615.5,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(7375.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(7764.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(8730.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(9341.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(10341.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10908.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(11630.9,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(12311.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(12700.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(13478.7,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(14534.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(15157.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mi" transform="translate(16213.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(16813.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><br>多维数组有两种映射方式：按行优先和按列优先</p>
<ul>
<li>按行优先：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="55.32ex" height="2.363ex" role="img" focusable="false" viewbox="0 -750 24451.4 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(1444,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(2204,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(2593,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(3936.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4603.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(5659.4,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(6340.4,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(7103.4,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(7863.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(8252.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g><g data-mml-node="mo" transform="translate(9768.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(10379.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mo" transform="translate(11379.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(11657.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(12224.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mo" transform="translate(12947,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(13336,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(14134.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(15134.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(15634.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(16245.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(17245.9,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(17657.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(18158.1,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(18880.3,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(19561.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(19950.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(20728.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(21783.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(22406.6,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mi" transform="translate(23462.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(24062.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li>
<li>按列优先：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="55.32ex" height="2.363ex" role="img" focusable="false" viewbox="0 -750 24451.4 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(1444,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(2204,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(2593,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(3936.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4603.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(5659.4,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(6340.4,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(7103.4,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(7863.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(8252.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g><g data-mml-node="mo" transform="translate(9768.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(10379.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mo" transform="translate(11379.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(11657.5,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(12291.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mo" transform="translate(13014,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(13403,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(14201.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(15201.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(15701.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(16312.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(17312.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(17657.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(18158.1,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(18880.3,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(19561.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(19950.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(20728.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(21783.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(22406.6,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mi" transform="translate(23462.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(24062.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li>
</ul>
<h2 id="压缩存储"><a href="#压缩存储" class="headerlink" title="压缩存储"></a>压缩存储</h2><ol>
<li>对称矩阵：上三角区元素与下三角区对应元素相等<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/cemetry_metrix.png"></li>
<li>三角矩阵：上三角区或者下三角区元素均为同一常量(图为下三角矩阵对应存储关系)<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/tringle_metrix.png"></li>
<li>三对角矩阵：对于n阶矩阵A中的任意一个元素<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="3.04ex" height="1.663ex" role="img" focusable="false" viewbox="0 -441 1343.9 735.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g></svg></mjx-container>,当|i-j|&gt;1时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="7.189ex" height="2.173ex" role="img" focusable="false" viewbox="0 -666 3177.4 960.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(1621.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(2677.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container>;由此得出对应的一维矩阵下标<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="15.839ex" height="2.032ex" role="img" focusable="false" viewbox="0 -694 7000.9 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1854.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(2576.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(3299,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3866.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(4866.4,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(6500.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g></g></svg></mjx-container></li>
<li>稀疏矩阵：矩阵中非零元素的个数t，相对于矩阵元素的个数s来说非常少。对此，将非零元素及其相应的行和列构成一个三元组。<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/small_metrix.png"></li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>第三章-数据链路层</title>
    <url>/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<p>数据链路层使用“物理层”提供的“比特传输”服务<br>数据链路层为网络层提供服务，将网络层的IP数据报（分组）封装成帧，传输给下一个相邻节点<br><strong>物理链路</strong>：传输介质（0层）+物理层（1层）实现了相邻节点之间的“物理链路”<br><strong>逻辑链路</strong>：数据链路层需要基于“物理链路”，实现相邻结点之间逻辑上无差错的“数据链路”  </p>
<hr>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li>封装成帧：<ul>
<li>帧定界：如何让接收方能够确定帧的界限</li>
<li>透明传输：接收方链路层要能从收到的帧内恢复原始SDU，让网络层“感受不到”将分组封装成帧的过程</li>
</ul>
</li>
<li>差错控制：发现并解决一个帧内部的“位错”<ul>
<li>解决方案一：接收方发现比特错后丢弃帧，发送方重传帧（仅需采用检错编码）</li>
<li>解决方案二：由接收方发现并纠正比特错误（需采用纠错编码）</li>
</ul>
</li>
<li>可靠传输：发现并解决“帧错”（帧丢失、帧重复、帧失序）</li>
<li>流量控制：控制发送方发送帧的速率别太快，让接收方“来得及”接受</li>
<li>介质访问控制：<ul>
<li>“广播信道”需要实现此功能。广播信道在逻辑上是总线型拓扑，多个结点需争抢传输介质的使用权</li>
<li>“点对点信道”通常不需要实现此功能。点对点信道通常意味着两个节点之间有专属介质，不用抢</li>
</ul>
</li>
</ul>
<hr>
<h1 id="组帧"><a href="#组帧" class="headerlink" title="组帧"></a>组帧</h1><ul>
<li>字符计数法：在每个帧开头，用一个定长计数字段表示帧长<ul>
<li>缺点：任何一个技术字段出错，都会导致后续所有帧无法定界</li>
</ul>
</li>
<li>字节填充法：使用SOH和EOT控制字符表示一帧的开始与结束，通常会使用ESC转义字符避免帧中出现控制字符导致扫描出错。</li>
<li>零比特填充法（HDLC、PPP）：使用比特串01111110来标志一帧的开始和结束<ul>
<li>发送方需要对帧的数据部分进行处理，<em>每当遇到5个1，就填充一个0</em></li>
<li>接收方需要对帧的数据部分进行逆处理，<em>每当遇到连续5个1，就删掉后面的0</em></li>
</ul>
</li>
<li>违规编码法：需要物理层配合，对采用的信号传输方式使用违规的信号编码，例如基于曼彻斯特码，每一个信号是观察信号是否跳变，当信号不进行跳变时则“违规”，将其表示帧的开始或结束</li>
</ul>
<hr>
<h1 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h1><h3 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h3><p>奇（偶）校验码：整个校验码（有效信息为何校验位）中“1”的个数为奇（偶）数<br>奇校验：检查信息位中“1”的个数为偶数则校验位为1，为奇数则检验位为0（偶校验相反）<br>偶校验的硬件实现：各信息进行异或运算，得到的结果即为偶校验位<br>缺点：只能检测奇数位出现错误的情况，并且不知道哪些位出错</p>
<h3 id="循环冗余码（CRC）"><a href="#循环冗余码（CRC）" class="headerlink" title="循环冗余码（CRC）"></a>循环冗余码（CRC）</h3><p>思想：数据发送、接收方约定为一个“除数”，K个信息位+R个校验位作为“被除数”，添加校验位后需保证出发的余数为0，然后接收方进行除法检测余数是否为0，非0即需要重传或者纠错<br>基本思想：</p>
<ol>
<li>收发双方约定生成多项式G(x)（最高位和最低位必须为1），k位位串可视为阶数为k-1的多项式的系数序列。例如，可用多项式<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="11.226ex" height="2.072ex" role="img" focusable="false" viewbox="0 -833.9 4962 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msup" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3461.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(4462,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>表示位串1101</li>
<li>发送方基于待发送的数据和G(x)，计算冗余码，将冗余码附加到数据后面一起发送</li>
<li>接收方收到数据和冗余码后，通过G(x)来计算收到的数据和冗余码是否产生差错</li>
</ol>
<p>检错能力：</p>
<ul>
<li>可检测出所有格奇数个错误</li>
<li>可检测出所有双比特的错误</li>
<li>可检测出所有小于等于检验位长度的连续错误</li>
<li>若选择合适的生成多项式，且<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="15.941ex" height="2.226ex" role="img" focusable="false" viewbox="0 -846 7046.1 984"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g></g><g data-mml-node="mo" transform="translate(1397.5,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(2453.2,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mo" transform="translate(3564.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(4564.7,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mo" transform="translate(5545.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(6546.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>,则可纠正单比特错误</li>
</ul>
<h3 id="海明校验码"><a href="#海明校验码" class="headerlink" title="海明校验码"></a>海明校验码</h3><ol>
<li>确定海明码位数：n为有效信息位数，k为校验位的位数，则信息位n和校验位k应满足<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="18.265ex" height="2.244ex" role="img" focusable="false" viewbox="0 -853.7 8073.3 991.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(2565.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(3565.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(4343.7,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="msup" transform="translate(5399.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(6573.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(7573.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></li>
<li>确定校验位的分布，校验位<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.192ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 969 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>放在海明位号为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.915ex" height="1.887ex" role="img" focusable="false" viewbox="0 -833.9 1730.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container>的位置上，信息位按顺序放到其余位置</li>
<li>分组以形成校验关系：被检验数据位的海明位号等于检验该数据位的各检验位海明位号之和</li>
<li>检验位取值：检验位<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.192ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 969 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>的值为第i组所有位求异或</li>
<li>构造校验方程：G1 = P1 ⊕ D1 ⊕ D2 ⊕ D4 ；G2 = P2 ⊕ D1 ⊕ D3 ⊕ D4；G3 = P3 ⊕ D2 ⊕ D3 ⊕ D4等，最后由“G3G2G1”的值进行判断，若为“000”，则正确，若为“001”，则第一位发生了错误</li>
</ol>
<p>综上所述，海明码纠错能力只有1位，检错能力可以检错2位<br>海明码“纠错”d位，需要码距2d+1的编码方案；“检错”d位，则只需码距为d+1  </p>
<hr>
<h1 id="流量控制与可靠传输机制"><a href="#流量控制与可靠传输机制" class="headerlink" title="流量控制与可靠传输机制"></a>流量控制与可靠传输机制</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.373ex;" xmlns="http://www.w3.org/2000/svg" width="15.049ex" height="1.918ex" role="img" focusable="false" viewbox="0 -683 6651.8 847.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(977,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="mo" transform="translate(1747,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(2747.2,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(977,-150) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g></g><g data-mml-node="mo" transform="translate(4588.7,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="msup" transform="translate(5644.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>  </p>
<h2 id="停止等待协议（S-W）"><a href="#停止等待协议（S-W）" class="headerlink" title="停止等待协议（S-W）"></a>停止等待协议（S-W）</h2><p>原理：发送方每次只允许发送一个帧，接收方每接收一个帧都要反馈一个应答信号，表示可以接受下一帧，发送方收到应答信号后才能发送下一帧。若发送方没有收到接收方反馈的应答信号，则需要一直等待。发送方每发送完一个帧，就进入等待接收方确认信息的过程中，因而传输效率很低。<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/SW.png"></p>
<h2 id="后退N帧协议（GBN）"><a href="#后退N帧协议（GBN）" class="headerlink" title="后退N帧协议（GBN）"></a>后退N帧协议（GBN）</h2><p>在后退N帧协议中，发送方可在为收到确认帧的情况下，将序号在发送窗口内的多个数据帧全部发送出去。后退N帧的含义是：发送方发送N个数据帧后，若发现这N个帧的前一个数据帧在计时器超时的时候仍未收到其确认信息，则该帧被判为出错或丢失，此时发送方不得不重传该出错帧及随后的N个帧<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/GBN.png"></p>
<h2 id="选择重传协议（SR）"><a href="#选择重传协议（SR）" class="headerlink" title="选择重传协议（SR）"></a>选择重传协议（SR）</h2><p>选择重传协议：用于在不可靠的网络中进行可靠数据传输。它允许发送方同时发送多个数据包，并在接收方接收到这些数据包后进行选择性的重传。只有丢失或损坏的数据包会被重新传输，而不需要重新传输整个数据流。<code>存在帧缓冲区，用于维持帧的顺序位次</code>  </p>
<ol>
<li>发送方将数据分成多个数据包，并分配唯一的序列号给每个数据包。</li>
<li>发送方将这些数据包发送到接收方。</li>
<li>接收方接收数据包，并根据序列号将它们按顺序重组。</li>
<li>如果接收方检测到有丢失或损坏的数据包，它会向发送方发送一个选择性重传请求，请求重新发送仅丢失或损坏的数据包。</li>
<li>发送方收到选择性重传请求后，仅重新发送被请求的数据包。</li>
<li>这个过程不断重复，直到接收方成功接收所有数据包。</li>
</ol>
<hr>
<h1 id="信道划分介质访问控制"><a href="#信道划分介质访问控制" class="headerlink" title="信道划分介质访问控制"></a>信道划分介质访问控制</h1><h2 id="信道划分介质访问控制（MAC）：-将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把时域和频域资源合理地分配给网路上的设备。多路复用技术：把多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备共享信道资源，提高信道利用率。分用：把一条广播信道，逻辑上分成几条用于两个节点之间通信的互不干扰的子信道，实际就是把广播信道转变为点对点信道。-频分多路复用（FDM）用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。频分复用的所有用户在同样的时间占用不同的带宽资源。优点：充分利用传输介质带宽，系统效率较高；由于技术比较成熟，实现也比较容易。-时分多路复用（TDM）将时间划分为一段段等长的时分复用帧。每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙，所有用户轮流占用信道。统计时分复用（STDM）：每一个STDM帧中的时隙数小于连接在集中器上的用户数。各用户有了数据就随时发往集中器的输入缓存，然后集中按顺序依次扫描输入缓存，把缓存中的输入数据放入STDM帧中，一个STDM帧满了就可以发出。STDM帧不是固定分配时隙，而是按需动态分配时隙。-波分多路复用（WDM）光的频分多路复用，在一根光纤中传输多种不同波长的光信号，由于波长不同，所以各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。-码分多路复用（CDM）码分多址（CDMA）：1个比特分为多个码片，每一个站点被指定一个唯一的m位的芯片序列。1-多个站点同时发送数据的时候，要求各个站点芯片序列相互正交，规格化内积为0-S·T-frac-1-m-sum-i-1-m-S-iT-i-0-2-两个向量到了公共信道，线性相加。-S-T3-数据分离：合并的数据和源站规格化内积-S·-S-T-1-T·-S-T-1"><a href="#信道划分介质访问控制（MAC）：-将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把时域和频域资源合理地分配给网路上的设备。多路复用技术：把多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备共享信道资源，提高信道利用率。分用：把一条广播信道，逻辑上分成几条用于两个节点之间通信的互不干扰的子信道，实际就是把广播信道转变为点对点信道。-频分多路复用（FDM）用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。频分复用的所有用户在同样的时间占用不同的带宽资源。优点：充分利用传输介质带宽，系统效率较高；由于技术比较成熟，实现也比较容易。-时分多路复用（TDM）将时间划分为一段段等长的时分复用帧。每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙，所有用户轮流占用信道。统计时分复用（STDM）：每一个STDM帧中的时隙数小于连接在集中器上的用户数。各用户有了数据就随时发往集中器的输入缓存，然后集中按顺序依次扫描输入缓存，把缓存中的输入数据放入STDM帧中，一个STDM帧满了就可以发出。STDM帧不是固定分配时隙，而是按需动态分配时隙。-波分多路复用（WDM）光的频分多路复用，在一根光纤中传输多种不同波长的光信号，由于波长不同，所以各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。-码分多路复用（CDM）码分多址（CDMA）：1个比特分为多个码片，每一个站点被指定一个唯一的m位的芯片序列。1-多个站点同时发送数据的时候，要求各个站点芯片序列相互正交，规格化内积为0-S·T-frac-1-m-sum-i-1-m-S-iT-i-0-2-两个向量到了公共信道，线性相加。-S-T3-数据分离：合并的数据和源站规格化内积-S·-S-T-1-T·-S-T-1" class="headerlink" title="信道划分介质访问控制（MAC）：  将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把时域和频域资源合理地分配给网路上的设备。多路复用技术：把多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备共享信道资源，提高信道利用率。分用：把一条广播信道，逻辑上分成几条用于两个节点之间通信的互不干扰的子信道，实际就是把广播信道转变为点对点信道。## 频分多路复用（FDM）用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。频分复用的所有用户在同样的时间占用不同的带宽资源。优点：充分利用传输介质带宽，系统效率较高；由于技术比较成熟，实现也比较容易。## 时分多路复用（TDM）将时间划分为一段段等长的时分复用帧。每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙，所有用户轮流占用信道。统计时分复用（STDM）：每一个STDM帧中的时隙数小于连接在集中器上的用户数。各用户有了数据就随时发往集中器的输入缓存，然后集中按顺序依次扫描输入缓存，把缓存中的输入数据放入STDM帧中，一个STDM帧满了就可以发出。STDM帧不是固定分配时隙，而是按需动态分配时隙。## 波分多路复用（WDM）光的频分多路复用，在一根光纤中传输多种不同波长的光信号，由于波长不同，所以各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。## 码分多路复用（CDM）码分多址（CDMA）：1个比特分为多个码片，每一个站点被指定一个唯一的m位的芯片序列。1. 多个站点同时发送数据的时候，要求各个站点芯片序列相互正交，规格化内积为0.     $S·T=\frac{1}{m}\sum_{i=1}^{m}S_iT_i=0$2. 两个向量到了公共信道，线性相加。  S-T3. 数据分离：合并的数据和源站规格化内积$S·(S-T)=1 \ T·(S-T)=1$"></a>信道划分介质访问控制（MAC）：  将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把时域和频域资源合理地分配给网路上的设备。<br>多路复用技术：把多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备共享信道资源，提高信道利用率。<br>分用：把一条广播信道，逻辑上分成几条用于两个节点之间通信的互不干扰的子信道，实际就是把广播信道转变为点对点信道。<br>## 频分多路复用（FDM）<br>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。频分复用的所有用户在同样的时间占用不同的带宽资源。<br>优点：充分利用传输介质带宽，系统效率较高；由于技术比较成熟，实现也比较容易。<br>## 时分多路复用（TDM）<br>将时间划分为一段段等长的时分复用帧。每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙，所有用户轮流占用信道。<br>统计时分复用（STDM）：每一个STDM帧中的时隙数小于连接在集中器上的用户数。各用户有了数据就随时发往集中器的输入缓存，然后集中按顺序依次扫描输入缓存，把缓存中的输入数据放入STDM帧中，一个STDM帧满了就可以发出。STDM帧不是固定分配时隙，而是按需动态分配时隙。<br>## 波分多路复用（WDM）<br>光的频分多路复用，在一根光纤中传输多种不同波长的光信号，由于波长不同，所以各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。<br>## 码分多路复用（CDM）<br>码分多址（CDMA）：1个比特分为多个码片，每一个站点被指定一个唯一的m位的芯片序列。<br>1. 多个站点同时发送数据的时候，要求各个站点芯片序列相互正交，规格化内积为0.     <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="24.367ex" height="2.755ex" role="img" focusable="false" viewbox="0 -864.9 10770.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(867.2,0)"><path data-c="B7" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(1367.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(2349.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3405,0)"><g data-mml-node="mn" transform="translate(353.6,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><rect width="820.8" height="60" x="120" y="220"/></g><g data-mml-node="munderover" transform="translate(4632.5,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="msub" transform="translate(7085.8,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="msub" transform="translate(8025.8,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(9214.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(10270.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container><br>2. 两个向量到了公共信道，线性相加。  S-T<br>3. 数据分离：合并的数据和源站规格化内积<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="30.339ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 13409.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(867.2,0)"><path data-c="B7" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mo" transform="translate(1367.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1756.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(2623.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(3623.9,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(4327.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4994.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6050.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mtext" transform="translate(6550.4,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(6800.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(7726.7,0)"><path data-c="B7" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mo" transform="translate(8226.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(8615.9,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(9483.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(10483.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(11187.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(11854.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(12909.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></h2><h1 id="随机访问介质访问控制"><a href="#随机访问介质访问控制" class="headerlink" title="随机访问介质访问控制"></a>随机访问介质访问控制</h1><h2 id="ALOHA协议"><a href="#ALOHA协议" class="headerlink" title="ALOHA协议"></a>ALOHA协议</h2><h2 id="纯ALOHA协议：不监听信道，不按时间槽发送，随机重发（如果发生冲突，接收方就会检测出差错，然后不予确认，发送方在一定时间内收不到就判断发生冲突，超时后等一随机时间在重传）时隙ALOHA协议：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送-纯ALOHA比时隙ALOHA吞吐量更低，效率更低-纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发-CSMA协议CS：载波监听，每一个站在发送数据之前以及发送数据时要检测一下总线上是否有其他计算机在发送数据。MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线。CSMA思想：发送帧之前，监听信道-1-坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则直接传输，不必等待；忙则一直监听，知道空闲马上传输。如果有冲突，则等待一个随机长的时间监听，重复上述过程。-优点：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。-假如有两个或两个以上的站点有数据要发送，冲突就不可避免。-非坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则直接传输，不必等待；忙则等待一个随机时间之后再进行监听-优点：采用随机的重发延迟时间可以减少冲突发生的可能性。-缺点：可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。-p-坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则以p概率直接传输，不必等待；概率1-p等待到下一个时间槽在传输；忙则持续监听知道信道空闲再以p概率发送。若冲突则等到下一个时间槽开始在监听并重复上述过程。-优点：既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间-缺点：发生冲突后还是要坚持把数据帧发送完，造成了浪费。-CSMA-CD（以太网）CD：碰撞检测，“边发送边监听”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。（半双工网络）争用期：以太网的端到端往返时间2t截断二进制指数规避算法：1-确定基本退避时间为争用期2t2-定义参数k为重传次数，但k不超过10，即k-min【重传次数，10】-3-从离散的整数集合【0，1，···，-2-k-1-】中随机取出一个数r，重传所需要退避的时间就是r倍的基本退避时间，即2rt4-当重传达16次仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错最小帧长问题：帧的传输时延至少要两倍于信号在总线中的传播时延（最小帧长-总线传播时延-数据传输速率-2）-以太网规定最短帧长为64B-CSMA-CA（无线局域网）工作原理：-发送数据前，先检测信道是否空闲。-空闲则发出RTS，RTS包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息；信道忙则等待。-接收端收到RTS，将响应CTS。-发送端收到CTS后，开始发送数据帧（同时预约信道：发送方告知其他站点自己要传多久数据）-接收端收到数据帧后，将用CRC来检验数据是否正确，正确则响应ACK帧-发送方收到ACK就可以及逆行下一个数据帧的发送，若没有则一直重传至规定重发次数为止（采用二进制指数退避算法来确定随机的推迟时间）"><a href="#纯ALOHA协议：不监听信道，不按时间槽发送，随机重发（如果发生冲突，接收方就会检测出差错，然后不予确认，发送方在一定时间内收不到就判断发生冲突，超时后等一随机时间在重传）时隙ALOHA协议：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送-纯ALOHA比时隙ALOHA吞吐量更低，效率更低-纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发-CSMA协议CS：载波监听，每一个站在发送数据之前以及发送数据时要检测一下总线上是否有其他计算机在发送数据。MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线。CSMA思想：发送帧之前，监听信道-1-坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则直接传输，不必等待；忙则一直监听，知道空闲马上传输。如果有冲突，则等待一个随机长的时间监听，重复上述过程。-优点：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。-假如有两个或两个以上的站点有数据要发送，冲突就不可避免。-非坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则直接传输，不必等待；忙则等待一个随机时间之后再进行监听-优点：采用随机的重发延迟时间可以减少冲突发生的可能性。-缺点：可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。-p-坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则以p概率直接传输，不必等待；概率1-p等待到下一个时间槽在传输；忙则持续监听知道信道空闲再以p概率发送。若冲突则等到下一个时间槽开始在监听并重复上述过程。-优点：既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间-缺点：发生冲突后还是要坚持把数据帧发送完，造成了浪费。-CSMA-CD（以太网）CD：碰撞检测，“边发送边监听”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。（半双工网络）争用期：以太网的端到端往返时间2t截断二进制指数规避算法：1-确定基本退避时间为争用期2t2-定义参数k为重传次数，但k不超过10，即k-min【重传次数，10】-3-从离散的整数集合【0，1，···，-2-k-1-】中随机取出一个数r，重传所需要退避的时间就是r倍的基本退避时间，即2rt4-当重传达16次仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错最小帧长问题：帧的传输时延至少要两倍于信号在总线中的传播时延（最小帧长-总线传播时延-数据传输速率-2）-以太网规定最短帧长为64B-CSMA-CA（无线局域网）工作原理：-发送数据前，先检测信道是否空闲。-空闲则发出RTS，RTS包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息；信道忙则等待。-接收端收到RTS，将响应CTS。-发送端收到CTS后，开始发送数据帧（同时预约信道：发送方告知其他站点自己要传多久数据）-接收端收到数据帧后，将用CRC来检验数据是否正确，正确则响应ACK帧-发送方收到ACK就可以及逆行下一个数据帧的发送，若没有则一直重传至规定重发次数为止（采用二进制指数退避算法来确定随机的推迟时间）" class="headerlink" title="纯ALOHA协议：不监听信道，不按时间槽发送，随机重发（如果发生冲突，接收方就会检测出差错，然后不予确认，发送方在一定时间内收不到就判断发生冲突，超时后等一随机时间在重传）时隙ALOHA协议：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送+ 纯ALOHA比时隙ALOHA吞吐量更低，效率更低+ 纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发## CSMA协议CS：载波监听，每一个站在发送数据之前以及发送数据时要检测一下总线上是否有其他计算机在发送数据。MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线。CSMA思想：发送帧之前，监听信道+ 1-坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则直接传输，不必等待；忙则一直监听，知道空闲马上传输。如果有冲突，则等待一个随机长的时间监听，重复上述过程。    + 优点：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。    + 假如有两个或两个以上的站点有数据要发送，冲突就不可避免。+ 非坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则直接传输，不必等待；忙则等待一个随机时间之后再进行监听    + 优点：采用随机的重发延迟时间可以减少冲突发生的可能性。    + 缺点：可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。+ p-坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则以p概率直接传输，不必等待；概率1-p等待到下一个时间槽在传输；忙则持续监听知道信道空闲再以p概率发送。若冲突则等到下一个时间槽开始在监听并重复上述过程。    + 优点：既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间    + 缺点：发生冲突后还是要坚持把数据帧发送完，造成了浪费。## CSMA/CD（以太网）CD：碰撞检测，“边发送边监听”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。（半双工网络）争用期：以太网的端到端往返时间2t截断二进制指数规避算法：1. 确定基本退避时间为争用期2t2. 定义参数k为重传次数，但k不超过10，即k=min【重传次数，10】.3. 从离散的整数集合【0，1，···，$2^k-1$】中随机取出一个数r，重传所需要退避的时间就是r倍的基本退避时间，即2rt4. 当重传达16次仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错最小帧长问题：帧的传输时延至少要两倍于信号在总线中的传播时延（最小帧长=总线传播时延*数据传输速率*2）,以太网规定最短帧长为64B## CSMA/CA（无线局域网）工作原理：+ 发送数据前，先检测信道是否空闲。+ 空闲则发出RTS，RTS包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息；信道忙则等待。+ 接收端收到RTS，将响应CTS。+ 发送端收到CTS后，开始发送数据帧（同时预约信道：发送方告知其他站点自己要传多久数据）+ 接收端收到数据帧后，将用CRC来检验数据是否正确，正确则响应ACK帧+ 发送方收到ACK就可以及逆行下一个数据帧的发送，若没有则一直重传至规定重发次数为止（采用二进制指数退避算法来确定随机的推迟时间）"></a>纯ALOHA协议：不监听信道，不按时间槽发送，随机重发（如果发生冲突，接收方就会检测出差错，然后不予确认，发送方在一定时间内收不到就判断发生冲突，超时后等一随机时间在重传）<br>时隙ALOHA协议：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送<br>+ 纯ALOHA比时隙ALOHA吞吐量更低，效率更低<br>+ 纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发<br>## CSMA协议<br>CS：载波监听，每一个站在发送数据之前以及发送数据时要检测一下总线上是否有其他计算机在发送数据。<br>MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线。<br>CSMA思想：<code>发送帧之前，监听信道</code><br>+ 1-坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则直接传输，不必等待；忙则一直监听，知道空闲马上传输。如果有冲突，则等待一个随机长的时间监听，重复上述过程。<br>    + 优点：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。<br>    + 假如有两个或两个以上的站点有数据要发送，冲突就不可避免。<br>+ 非坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则直接传输，不必等待；忙则等待一个随机时间之后再进行监听<br>    + 优点：采用随机的重发延迟时间可以减少冲突发生的可能性。<br>    + 缺点：可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。<br>+ p-坚持CSMA：如果一个主机要发送消息，那么它先监听信道，空闲则以p概率直接传输，不必等待；概率1-p等待到下一个时间槽在传输；忙则持续监听知道信道空闲再以p概率发送。若冲突则等到下一个时间槽开始在监听并重复上述过程。<br>    + 优点：既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间<br>    + 缺点：发生冲突后还是要坚持把数据帧发送完，造成了浪费。<br>## CSMA/CD（以太网）<br>CD：碰撞检测，“边发送边监听”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。（半双工网络）<br>争用期：以太网的端到端往返时间2t<br>截断二进制指数规避算法：<br>1. 确定基本退避时间为争用期2t<br>2. 定义参数k为重传次数，但k不超过10，即k=min【重传次数，10】.<br>3. 从离散的整数集合【0，1，···，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.049ex" height="2.117ex" role="img" focusable="false" viewbox="0 -853.7 2673.8 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(1173.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2173.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>】中随机取出一个数r，重传所需要退避的时间就是r倍的基本退避时间，即2rt<br>4. 当重传达16次仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错<br><strong>最小帧长问题：帧的传输时延至少要两倍于信号在总线中的传播时延（最小帧长=总线传播时延*数据传输速率*2）,以太网规定最短帧长为64B</strong><br>## CSMA/CA（无线局域网）<br>工作原理：<br>+ 发送数据前，先检测信道是否空闲。<br>+ 空闲则发出<strong>RTS</strong>，RTS包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息；信道忙则等待。<br>+ 接收端收到RTS，将响应<strong>CTS</strong>。<br>+ 发送端收到CTS后，开始发送数据帧（同时<strong>预约信道</strong>：发送方告知其他站点自己要传多久数据）<br>+ 接收端收到数据帧后，将用CRC来检验数据是否正确，正确则响应<strong>ACK帧</strong><br>+ 发送方收到ACK就可以及逆行下一个数据帧的发送，若没有则一直重传至规定重发次数为止（采用二进制指数退避算法来确定随机的推迟时间）</h2><h1 id="轮询访问介质"><a href="#轮询访问介质" class="headerlink" title="轮询访问介质"></a>轮询访问介质</h1><p>信道划分介质访问控制（MAC）：</p>
<ul>
<li>基于多路复用技术划分资源</li>
<li>网络负载重：共享信道效率高，且公平</li>
<li>网络负载轻：共享信道效率低<br>随机访问MAC：</li>
<li>用户根据意愿随机发送信息，发送信息时可独占信道带宽</li>
<li>网络负载重：产生冲突开销</li>
<li>网络负载轻：共享信道效率高，单个节点可利用信道全部带宽<br>轮询访问MAC协议：</li>
<li>既要不产生冲突，又要发送时占全部带宽。</li>
</ul>
<h2 id="轮询协议"><a href="#轮询协议" class="headerlink" title="轮询协议"></a>轮询协议</h2><p>主节点轮流“邀请”从属结点发送数据</p>
<h2 id="令牌传递协议（物理星型拓扑，逻辑环形拓扑）"><a href="#令牌传递协议（物理星型拓扑，逻辑环形拓扑）" class="headerlink" title="令牌传递协议（物理星型拓扑，逻辑环形拓扑）"></a>令牌传递协议（物理星型拓扑，逻辑环形拓扑）</h2><p>令牌：一个特殊格式的MAC控制帧，不含任何信息。控制信道使用，确保同一时刻只有一个结点独占信道。<br><em>常用于负载较大、通信量较大的网络中</em>  </p>
<hr>
<h1 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h1><p>简称LAN，是指在某一区域内由多台计算机互联成的计算机组，使用广播信道。</p>
<ol>
<li>覆盖的地理范围较小，只在一个相对独立的局部范围内联</li>
<li>使用专门铺设的传输介质进行联网，数据传输速率高</li>
<li>通信延迟时间短，误码率低，可靠性较高</li>
<li>各站为平等关系，共享传输信道</li>
<li>多采用分布式控制和广播式通信，能进行广播和组播</li>
</ol>
<h2 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h2><p>主要存在：星型拓扑、总线型拓扑、环形拓扑、树型拓扑</p>
<ul>
<li>星型：传输速度快、便于控制和管理但网络可靠性低、网络共享能力差，有单点故障问题</li>
<li>总线型：可靠性高、网络节点响应速度快、共享资源能力强、设备投入量少、成本低、安装使用方便</li>
<li>环形：通信设备和线路比较节省，有单点故障问题，系统响应延时长，信息传输效率低</li>
<li>树型：易于拓展、易于隔离故障、容易单点故障</li>
</ul>
<h2 id="介质访问控制方法"><a href="#介质访问控制方法" class="headerlink" title="介质访问控制方法"></a>介质访问控制方法</h2><ol>
<li>CSMA/CD：常用于总线型局域网，也用于树型网络</li>
<li>令牌总线：常用于总线型局域网，也用于树型网络。把总线型或树型网络中的各个工作站按一定顺序如按接口地址大小排列形成一个逻辑环。只有令牌持有者才能控制总线，才有发送信息的权力。</li>
<li>令牌环：用于环形局域网，如令牌环网</li>
</ol>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol>
<li>以太网：IEEE802.3</li>
<li>令牌环网：物理上是星型拓扑结构，逻辑上是环形拓扑结构（IEEE802.5）</li>
<li>FDDI网：物理上采用了双环拓扑结构，逻辑上是环形拓扑结构</li>
<li>ATM网：较新型的单元交换技术，使用53字节固定长度的单元进行交换</li>
<li>无线局域网：采用IEEE802.11标准</li>
</ol>
<h3 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h3><p>提供无连接、不可靠的服务。<strong>只实现无差错接受，不实现可靠传输</strong><br><em>以太网参考模型一般只包括物理层和数据链路层（网卡实现的主要功能在物理层和数据链路层）</em><br>10BASE-T是传送基带信号的双绞线以太网，T表示双绞线，传输速率是10Mb/s，<strong>采用曼彻斯特编码，采用CSMA/CD</strong><br>MAC地址：每个适配器有一个全球唯一的48位二进制地址，前24位代表厂家，后24位厂家自己制定<br>以太网V2MAC帧：<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/V2MAC.png"><br>高速以太网：100BASE-T以太网（全双工、半双工）、吉比特以太网（使用光纤传输、全双工、半双工）、10吉比特以太网<br>快速以太网仍然使用CSMA/CD协议，采用保持最短帧长不变而将最大电缆长度减少提高数据传输速率</p>
<h3 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h3><p>802.11的MAC帧头格式：<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/80211MAC.png"></p>
<ul>
<li>有固定基础设施无线局域网</li>
<li>无固定基础设施无线局域网的自组织网络</li>
</ul>
<h2 id="MAC子层和LLC子层"><a href="#MAC子层和LLC子层" class="headerlink" title="MAC子层和LLC子层"></a>MAC子层和LLC子层</h2><p>IEEE802将数据链路层划分为逻辑链路层LLC子层和介质访问控制MAC子层<br>LLC：负责识别网络层协议，然后对他们进行封装。<br>MAC：数据帧的封装/卸装，帧的寻址和识别，真的接受与发送，链路的管理，帧的差错控制等。  </p>
<h2 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h2><p>传统局域网的局限：</p>
<ul>
<li>缺乏流量隔离：即使把组流量局域划到一个单一交换机，广播流量仍会跨越整个机构网络</li>
<li>管理用户不便：如果一个主机在不同组件移动，必须改变物理布线，连接到新的交换机上。</li>
<li>路由器成本较高：局域网内使用很多路由器花销较大</li>
</ul>
<p>定义：VLAN是一种将局域网内的设备划分成与物理位置无关的逻辑组的局域网。每个VLAN是一个单独的广播域。<br>交换机上生成的各VLAN互不相通，若想实现通信，需要借助路由器、三层交换机。<br>VLAN标记的前两个字节表明是IEEE802.1Q帧，接下来4位没用，后面12位是VLAN标识符VID，唯一表示了该以太网帧属于哪个VLAN</p>
<ul>
<li>VID的取值范围是0<del>4095，表示VLAN的有效ID取值范围为1</del>4094</li>
<li>IEEE802.1Q帧是由交换机来处理的，而不是由用户主机来处理的（即主机和交换机之间酯交换普通的以太网帧）</li>
</ul>
<h1 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h1><p>通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，可以形成国际性的远程网络。<br>广域网的通信子网主要使用<strong>分组交换</strong>技术，广域网的通信子网可以利用公用分组交换网、卫星通信网和无限分组交换网，他将分布在不同地区的局域网或计算机系统互连起来，实现存储转发，达到<strong>资源共享</strong>的目的。</p>
<h2 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h2><p>只支持全双工链路，提供有连接不可靠服务  </p>
<ul>
<li>简单：对于链路层的帧，无需纠错，无需序号，无需流量控制</li>
<li>封装成帧：帧定界符</li>
<li>透明传输：与帧定界符一样比特组合的数据应该如何处理：异步线路用字节填充，同步线路用比特填充</li>
<li>多种网络层协议：封装的IP数据报可以采用多种协议</li>
<li>多种类型链路：串行/并行，同步/异步，电/光</li>
<li>差错检测</li>
<li>检测连接状态</li>
<li>最大传送单元</li>
<li>网络层地址协商</li>
<li>数据压缩协商<br>无需满足的要求：</li>
<li>纠错</li>
<li>流量控制</li>
<li>序号</li>
<li>不支持多点线路<br>三个组成部分：</li>
<li>一个将IP数据报封装到串行链路的方法</li>
<li>链路控制协议LCP：建立并维护数据链路连接</li>
<li>网络控制协议NCP：PPP可支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，为网络层协议建立和配置逻辑连接<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/PPP.png"></li>
</ul>
<table>
<thead>
<tr>
<th align="center">设备名称</th>
<th align="center">能否隔离冲突域</th>
<th align="center">能否隔离广播域</th>
</tr>
</thead>
<tbody><tr>
<td align="center">集线器</td>
<td align="center">不能</td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center">中继器</td>
<td align="center">不能</td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center">交换机</td>
<td align="center">能</td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center">网桥</td>
<td align="center">能</td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center">路由器</td>
<td align="center">能</td>
<td align="center">能</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>网络层</title>
    <url>/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    <content><![CDATA[<p>主要任务：把分组从源端传到目的端，为分布交换网上的不同主机提供通信服务。网络层传输单位是数据报。  </p>
<ul>
<li>路由选择与分组转发</li>
<li>异构网络互连</li>
<li>拥塞控制</li>
</ul>
<h1 id="SDN"><a href="#SDN" class="headerlink" title="SDN"></a>SDN</h1><p>数据平面（转发）：对于数据处理过程中各种具体处理转发过程。<br>控制平面（路由选择）：用于控制和管理网络协议的运行。<br>SDN：控制平面从路由器物理上分离。路由器仅实现转发，远程控制器计算和转发转发表以供每台路由器所使用。路由选择处理器负责与远程控制器通信，目的是接受远程控制器计算的转发表项。  </p>
<ul>
<li>SDN控制器：维护准确的网络状态信息（远程链路、路由器和主机的状态）；为运行在控制平面中的网络控制应用程序提供信息<ul>
<li>北向API：与网络控制应用程序交互。允许网络控制应用程序在状态管理层之间读写网络状态</li>
<li>网络范围状态管理层：由SDN控制平面作出的最终控制决定，将要求控制器具有有关网络的主机、链路等最新状态信息</li>
<li>通信层：SDN控制器与受控网络设备之间的通信（OpenFlow协议），包含“南向接口”</li>
</ul>
</li>
<li>网络控制应用程序：根据SDN控制器提供的方法，这些应用程序通过这些方法能够监视、编程和控制下面的网络设备</li>
</ul>
<h1 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h1><ul>
<li>静态路由算法：管理员手动配置路由信息<ul>
<li>优点：简便、可靠，在负荷稳定、拓扑变化不大的网络中运行效果很好，广泛应用于高度安全性的军事网络和较小的商业网络</li>
<li>缺点：路由更新慢，不使用大型网络</li>
</ul>
</li>
<li>动态路由算法（自适应路由算法）<ul>
<li>全局性（链路状态路由算法OSPF）：所有路由器掌握完整的网络拓扑和连路费用信息</li>
<li>分散性（距离向量路由算法RIP）：路由器只掌握物理相连的邻居及链路费用</li>
<li>优点：路由更新快，适用大型网络，及时响应链路费用或网络拓扑变化</li>
<li>缺点：算法复杂，增加网络负担</li>
</ul>
</li>
</ul>
<p>自治系统AS：在单一的技术管理下的一组路由器，而这些路由器使用一种AS内部的路由选择协议和共同的度量以确定分组在该AS内的路由，同时还使用一种AS之间的路由协议以确定在AS之间的路由。<code>一个AS内的所有网络都属于一个行政单位来管辖，一个自治系统的所有路由器在本自治系统内都必须连通</code>  </p>
<ul>
<li>内部网关协议IGP：一个AS内使用的 （RIP、OSPF）</li>
<li>外部网关协议EGP：AS之间使用的（BGP）</li>
</ul>
<h2 id="RIP协议（UDP）"><a href="#RIP协议（UDP）" class="headerlink" title="RIP协议（UDP）"></a>RIP协议（UDP）</h2><p>RIP是一种分布式的基于距离向量的路由选择协议，是因特网的协议标准，最大优点是<em>简单</em>。<br>RIP协议要求网络中每一个路由器都维护从它自己到其他每一个目的网络的唯一最佳距离记录。<br>距离：通常为“跳数”，即从源端口到目的端口所经过的路由器个数，经过路由器跳数+1.特别地，从一路由器到直接连接的网络距离为1.RIP允许一条路由最多只能包括15个路由器，因此距离为16表示<strong>网络不可达</strong>。  </p>
<ul>
<li>仅和相邻路由器交换信息</li>
<li>路由器交换的信息是自己的路由表</li>
<li>每30秒交换一次路由信息，然后路由器根据新信息更新路由表。若超过180s没收到邻居路由器的通告，则判定邻居没了并更新自己的路由表。</li>
</ul>
<p>更新路由表规则：</p>
<ul>
<li>若目的网络相同，且下一跳路由器相同，则直接更新</li>
<li>若是新的目的地址，则增加表项</li>
<li>若目的网络相同，则下一跳路由器不同，而距离更短，则更新</li>
<li>否则，无操作</li>
</ul>
<p><strong>好消息传得快，快消息传得慢</strong>  </p>
<h2 id="OSPF协议（IP）"><a href="#OSPF协议（IP）" class="headerlink" title="OSPF协议（IP）"></a>OSPF协议（IP）</h2><p>开放最短路径优先OSPF协议：“开放”标明OSPF不是受某一家厂商控制，而是公开发表的；使用的是Dijkstra提出的最短路径算法。  （每隔30min刷新；适用于大规模网络；收敛速度快）<br>OSPF将一个自治系统再划分为若干更小的范围，称为<em>区域</em>。划分区域的好处是，将利用洪泛法交换链路状态信息的范围局限在每个区域而非整个自治系统。<br>最主要的特征：使用分布式的链路状态协议。  </p>
<ul>
<li>使用洪泛式向自治系统内所有路由器发送信息，即路由器通过输出端口向所有相邻的路由器发送信息，而每一个相邻路由器又再次将此信息发往其所有的相邻路由器</li>
<li>发送的信息就是与本路由器相邻的所有路由器的链路状态（本路由器和那些路由器相邻，以及该链路的度量/代价–费用、距离、时延、带宽等）</li>
<li>只有当链路状态发生变化时，路由器才向所有路由器洪泛发送此信息</li>
</ul>
<h3 id="链路状态路由算法"><a href="#链路状态路由算法" class="headerlink" title="链路状态路由算法"></a>链路状态路由算法</h3><ol>
<li>每个路由器发现他的邻居结点【HELLO问候分组】，并了解邻居结点的网络地址。</li>
<li>设置到它的每个邻居的成本度量metric</li>
<li>构造【DD数据库描述分组】，相邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息。</li>
<li>如果DD分组中的摘要自己都有，则邻站不做处理；如果存在没有的或者是更新的，则发送【LSR链路状态请求分组】，请求自己没有的和比自己更新的信息。</li>
<li>收到邻站的LSR分组后，发送【LSU链路状态更新分组】进行更新</li>
<li>更新完毕后，邻站返回一个【LSAck链路状态确认分组】进行确认。</li>
</ol>
<p>只有一个路由器的链路状态发生变化：</p>
<ol>
<li>泛洪发送【LSU链路状态更新分组】进行更新</li>
<li>更新完毕后，其他站返回一个【LSAck链路状态确认分组】进行确认。</li>
<li>使用Dijkstar根据自己的链路状态数据库构造到其他节点间的最短路径。</li>
</ol>
<h2 id="BGP协议（应用层）（TCP）"><a href="#BGP协议（应用层）（TCP）" class="headerlink" title="BGP协议（应用层）（TCP）"></a>BGP协议（应用层）（TCP）</h2><p>和其他AS的邻站BGP发言人交换信息；交换网络可达性的信息，即要到达某个网络所要经过的一系列AS；发生变化时更新有变化的部分。  </p>
<ul>
<li>支持CIDR</li>
<li>发生变化时更新有变化的部分</li>
</ul>
<ol>
<li>OPEN报文：用来与相邻的另一个BGP发言人建立关系，并认证发送方</li>
<li>UPDATE报文：通告新路径或撤销原路径。</li>
<li>KEEPALIVE报文：在无UPDATE时，周期性证实邻站的连通性；也作为OPEN的确认。</li>
<li>NOTIFICTION报文：报告先前报文的差错；也被用于关闭连接<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%B1%82/Compare.png"></li>
</ol>
<h1 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h1><p><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%B1%82/IP.png"><br>首部长度：<strong>以4B为单位</strong>，表示数据报中首部的长度<br>MTU：最大传送单元，链路层数据帧可封装数据的上限。以太网的MTU是1500字节。  </p>
<p>标识：同意数据报的分片使用统一标识。<br>标志：只有两位有意义，中间位DF：（DF=1，禁止分片；DF=0，允许分片）；最低位MF（MF=1，后面还有“分片”；MF=0，代表最后一片/没分片）<br>片偏移：指出较长分组分片后，某片在原分组中的相对位置。<strong>以8B为单位</strong>。  </p>
<h1 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h1><p>IP地址：全世界唯一的32位/4字节标识符，标识路由器主机的接口{&lt;网络号&gt;&lt;主机号&gt;}<br><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%B1%82/IPv4.png"><br>特殊的IP地址</p>
<table>
<thead>
<tr>
<th>NetID（网络号）</th>
<th>HostID（主机号）</th>
<th>作为IP分组源地址</th>
<th>作为IP分组目的地址</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>全0</td>
<td>全0</td>
<td>可以</td>
<td>不可以</td>
<td>本网范围内表示主机，路由表中用于表示默认路由（表示整个Internet网络）</td>
</tr>
<tr>
<td>全0</td>
<td>特定值</td>
<td>可以</td>
<td>不可以</td>
<td>表示本网内某个特定主机</td>
</tr>
<tr>
<td>全1</td>
<td>全1</td>
<td>不可以</td>
<td>可以</td>
<td>本网广播地址（路由器不转发）</td>
</tr>
<tr>
<td>特定值</td>
<td>全0</td>
<td>不可以</td>
<td>不可以</td>
<td>网络地址，表示一个网络</td>
</tr>
<tr>
<td>特定值</td>
<td>全1</td>
<td>不可以</td>
<td>可以</td>
<td>直接广播地址，对特定网络上的所有主机进行广播</td>
</tr>
<tr>
<td>127</td>
<td>任何数</td>
<td>可以</td>
<td>可以</td>
<td>用于本地软件换回测试，称为环回地址</td>
</tr>
<tr>
<td>私有IP地址：</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>地址类别</th>
<th>地址范围</th>
<th>网段个数</th>
</tr>
</thead>
<tbody><tr>
<td>A类</td>
<td>10.0.0.0~10.255.255.255</td>
<td>1</td>
</tr>
<tr>
<td>B类</td>
<td>172.16.0.0~172.31.255.255</td>
<td>16</td>
</tr>
<tr>
<td>C类</td>
<td>192.168.0.0~192.168.255.255</td>
<td>256</td>
</tr>
<tr>
<td>常用的三种类别IP地址的使用范围：</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>网络类别</th>
<th>最大可用网络数</th>
<th>第一个可用的网络号</th>
<th>最后一个可用的网络号</th>
<th>每个网络的最大主机数</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.016ex" height="2.088ex" role="img" focusable="false" viewbox="0 -841 2659 923"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"/></g></g><g data-mml-node="mo" transform="translate(1158.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2159,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container></td>
<td>1</td>
<td>126</td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.816ex" height="2.09ex" role="img" focusable="false" viewbox="0 -841.7 3012.6 923.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container></td>
</tr>
<tr>
<td>B</td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.816ex" height="2.09ex" role="img" focusable="false" viewbox="0 -841.7 3012.6 923.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></td>
<td>128.1</td>
<td>191.255</td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.816ex" height="2.072ex" role="img" focusable="false" viewbox="0 -833.9 3012.6 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container></td>
</tr>
<tr>
<td>C</td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.816ex" height="2.072ex" role="img" focusable="false" viewbox="0 -833.9 3012.6 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></td>
<td>192.0.1</td>
<td>223.255.255</td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.016ex" height="2.072ex" role="img" focusable="false" viewbox="0 -833.9 2659 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"/></g></g><g data-mml-node="mo" transform="translate(1158.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2159,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container></td>
</tr>
</tbody></table>
<h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>网络地址转换NAT：在专用网连接到因特网的路由器安装NAT软件，安装了NAT软件的路由器叫NAT路由器，它至少有一个有效的外部全球IP地址。</p>
<h2 id="子网划分和子网掩码"><a href="#子网划分和子网掩码" class="headerlink" title="子网划分和子网掩码"></a>子网划分和子网掩码</h2><p>子网掩码：用来指明分类IP地址的主机号部分被借用了多少位作为子网号（与IP地址进行与运算）<br>路由器转发分组的算法：</p>
<ol>
<li>提取目的IP地址</li>
<li>是否直接交付</li>
<li>特定主机路由</li>
<li>检测路由表有无路径</li>
<li>默认路由0.0.0.0</li>
<li>丢弃，报告转发分组失败</li>
</ol>
<h2 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h2><p>CIDR把网络前缀都相同的连续的IP地址组成一个“CIDR地址块”<br>CIDR记法：IP地址后加上“/”，然后写上网络前缀<br>特点：</p>
<ol>
<li>消除了传统的A类、B类和C类地址以及划分子网的概念</li>
<li>融合子网地址与子网掩码，方便子网划分</li>
</ol>
<p>将多个子网聚合成一个较大的子网，叫做路由聚合。方法：<code>将网络前缀缩短（所有网络地址取交集）</code><br>使用CIDR时，查找路由表可能得到几个匹配结果（跟网络掩码按位相与），应选择具有最长网络前缀的路由。前缀越长，地址块越小，路由越具体。  </p>
<h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>ARP协议：完成主机或路由器IP地址到MAC地址的映射<br>四种典型情况：</p>
<ol>
<li>主机A发给本网络上的主机B：用ARP找到主机B的硬件地址</li>
<li>主机A发给另一网络上的主机B：用ARP找到本网络上一个路由器的硬件地址；</li>
<li>路由器发给本网络的主机A：用ARP找到主机A的硬件地址；</li>
<li>路由器发给另一网络的主机B：用ARP找到本网络上的一个路由器的硬件地址</li>
</ol>
<h2 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h2><p>动态主机配置协议DHCP是应用层协议，使用客户/服务器方式，客户端和服务端通过广播方式进行交互，基于UDP。<br>DHCP提供即插即用联网机制，主机可以从服务器动态获取IP地址、子网掩码、默认网关、DNS服务器名称与IP地址，允许地址重用，支持移动用户加入网络，支持在用地址续租。  </p>
<ol>
<li>主机广播DHCP发现报文</li>
<li>DHCP服务器广播DHCP提供报文</li>
<li>主机广播DHCP请求报文</li>
<li>DHCP服务器广播DHCP确认报文</li>
</ol>
<h2 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h2><h3 id="ICMP差错报文"><a href="#ICMP差错报文" class="headerlink" title="ICMP差错报文"></a>ICMP差错报文</h3><ul>
<li>终点不可达：当路由器或主机不能交付数据报时就像源点发送终点不可达报文。</li>
<li>源点抑制报文：当路由器或主机由于拥塞而丢弃数据报时，就像源点发送源点抑制报文，使源点知道应当把数据报的发送速率变慢。拥塞丢数据。</li>
<li>时间超过：当路由器收到生存时间TTL=0的数据报时，除丢弃该数据报外，还要向远点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向源点发送时间超过报文。</li>
<li>参数问题：当路由器或目的主机收到的数据报的首部中有的字段值不正确时，就丢弃该数据包，并向源点发送参数问题报文。</li>
<li>改变路由：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器。</li>
</ul>
<h3 id="ICMP询问报文"><a href="#ICMP询问报文" class="headerlink" title="ICMP询问报文"></a>ICMP询问报文</h3><ul>
<li>回送请求和回答报文：测试目的站是否可达以及了解其相关状态</li>
<li>时间戳请求和回答报文：用来进行时钟同步和测量时间</li>
<li>掩码地址请求和回答报文</li>
<li>路由器询问和通告报文</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>PING：测试两个主机之间的连通性，使用了ICMP回送请求和回答报文<br>Traceroute：跟踪一个分组从源点到终点的路径，使用了ICMP时间超过差错报告报文。</p>
<h1 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h1><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%B1%82/IPv6.png"><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%B1%82/IPv6-%E6%95%B0%E6%8D%AE%E6%8A%A5.png"></p>
<ul>
<li>版本：IPv6对应的是6</li>
<li>流标号：“流”是互联网络上从特定源点到特定终点的一系列数据报。所有属于同一个流的数据包具有同样的流标签</li>
<li>有效载荷长度：指明IPv6数据报除基本首部以外的字节数。</li>
<li>下一个首部：标识下一个扩展首部或上层协议首部</li>
<li>通信量类：区分不同的IPv6数据报的类别和优先级</li>
</ul>
<p><strong>IPv6和IPv4的区别：</strong></p>
<ul>
<li>IPv6将地址从32位扩大到128位，更大的地址空间</li>
<li>IPv6将IPv4的校验和字段彻底移除，以减少每跳的处理时间</li>
<li>IPv6将IPv4的可选字段移除首部，变成了扩展首部，称为灵活的首部格式，路由器通常不对扩展首部进行检查，大大提高了路由器的处理效率</li>
<li>IPv6支持即插即用，不需要DHCP协议</li>
<li>IPv6首部长度必须是8B的整数倍，IPv4首部是4B的整数倍</li>
<li>IPv6只能在主机处分片，IPv4可以在路由器和主机处分片</li>
<li>ICMIPv6：附加报文类型“分组过大”</li>
<li>IPv6取消了协议字段，改成了下一个首部字段</li>
<li>IPv6支持资源的预分配，支持实时视像等要求，保证一定的带宽和时延的应用</li>
<li>IPv6取消了总长度字段，改用了有效载荷长度字段。</li>
<li>IPv6取消了服务类型字段。</li>
</ul>
<p>基本地址类型：</p>
<ul>
<li>单播：一对一通信，可做源地址+目的地址</li>
<li>多播：一对多通信，可做目的地址</li>
<li>任播：一对多中的一个通信，可做目的地址</li>
</ul>
<p>IPv6向IPv4过渡的策略：</p>
<ul>
<li>双栈协议：同时启用IPv4协议栈和IPv6协议栈</li>
<li>隧道技术：将其他协议的数据报重新封装然后通过隧道发送</li>
</ul>
<h1 id="IP组播"><a href="#IP组播" class="headerlink" title="IP组播"></a>IP组播</h1><p>IP组播地址让源设备能够将分组发送给一组设备。属于多播组的设备将分配一个组播组IP地址（一群共同需求主机的相同标识）<br>组播地址范围为224.0.0.0~239.255.255.255（D类地址），一个D类地址表示一个组播组。只能用作分组的<strong>目标地址</strong>。源地址总是为单播地址。</p>
<ul>
<li>组播数据包不提供可靠交付，应用于UDP</li>
<li>对组播数据包不产生ICMP差错报文</li>
<li>并非所有D类地址都可以作为组播地址</li>
</ul>
<p>硬件组播：组播IP地址也需要相应的组播MAC地址在本地网络中实际传送帧。组播MAC地址以十六进制值01-00-5E打头，余下的6个十六机制位是根据IP组播组地址的最后23位转换得来的。<br>TCP/IP协议使用的以太网多播地址范围是01-00-5E-00-00-00到01-00-5E-7F-FF-FF  </p>
<ul>
<li>网际组管理协议IGMP：让路由器知道本局域网上是否有主机参加或退出了某个组播组</li>
<li>组播路由选择协议：找出以源主机为根节点的<em>多播转发树</em></li>
</ul>
<h1 id="移动IP"><a href="#移动IP" class="headerlink" title="移动IP"></a>移动IP</h1><p>移动IP技术是移动结点以固定的网络IP地址，实现跨越不同网段的漫游功能，并保证基于网络IP的网络权限再漫游过程中不发生任何改变。<br>移动节点：具有永久IP地址的移动设备。<br>归属代理（本地代理）：一个移动节点的永久“居所”称为归属网络，在归属网络中代表移动节点执行移动管理功能的实体叫做归属代理。<br>永久地址：移动站点在归属网络中的原始地址。<br>外部代理：在外部网络中帮助移动节点完成移动管理功能的实体称为外部代理。<br>转交地址：可以是外部代理的地址或动态配置的一个地址。</p>
<h1 id="网络层设备"><a href="#网络层设备" class="headerlink" title="网络层设备"></a>网络层设备</h1><p>路由器：一种具有多个输入输出端口和多个输出端口的专用计算机，其任务是分组转发，互联两个不同网络层协议的网段。（可以隔离冲突域和广播域）<br>路由表是根据路由选择算法得出的，主要用途是路由选择，总用软件来实现。<br>转发表由路由表得来的，可以用软件实现，也可以用特殊的硬件来实现。  </p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>第五章-传输层</title>
    <url>/2024/08/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<p><em>只有主机才有的层次</em><br>功能：</p>
<ul>
<li>提供进程和进程之间的逻辑通信</li>
<li>复用和分用</li>
<li>对收到的报文进行差错检测</li>
<li>传输层的两种协议（TCP、UDP）</li>
</ul>
<p>复用：应用层所有的应用进程都可以通过传输层在传输到网络层<br>分用：传输层从网络层收到数据后指明的应用程序<br>端口：传输层的SAP，标识主机中的应用进程（逻辑端口/软件端口）。端口号只有本地意义，在因特网中不同计算机的相同端口号是没有联系的  </p>
<ul>
<li>服务端使用的端口号<ul>
<li>熟知端口号：给TCP/IP最重要的一些应用程序，让所有用户都知道（0~1023）</li>
<li>登记端口号：为没有熟知端口号的应用程序使用的（1024~49151）</li>
</ul>
</li>
<li>客户端使用：仅在客户进程运行时才动态选择的端口号（49152~65535）<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/acknowledged_pot.png"><br>套接字：唯一标识网络中的一个主机和它上面的一个进程（主机IP地址，端口号）</li>
</ul>
<hr>
<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>UDP只在IP数据报服务之上增加很少功能，即复用分用和差错检测功能</p>
<ul>
<li>UDP是无连接的，减少开销和发送数据之前的时延</li>
<li>UDP使用最大努力交付，即不保证可靠交付</li>
<li>UDP是面向报文的，适合一次性传输少量数据的网络应用</li>
<li>UDP无拥塞控制，适合很多实时应用</li>
<li>UDP首部开销小，8B，TCP20B<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/UDP.png"><br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/UDP_IP.png"><br>伪首部只有在计算校验和时才出现，不想下传送也不向上递交。<br>17：封装UDP报文的IP数据报首部协议字段时17.</li>
</ul>
<hr>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><ul>
<li>TCP是面向连接（虚连接）的传输层协议</li>
<li>每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的</li>
<li>TCP提供可靠交付的服务，无差错、不丢失、不重复、按序到达。</li>
<li>提供全双工通信。<ul>
<li>发送缓存：准备发送的数据&amp;已发送但尚未收到确认的数据</li>
<li>接受缓存：按序到达但尚未被接受应用程序读取的数据&amp;不按序到达的数据</li>
</ul>
</li>
<li>TCP面向字节流：TCP把应用程序交下来的数据堪称仅仅是一连串的无结构字节流<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/TCP.png">序号（seq）：在一个TCP连接中传送的字节流中的每一个字节都按顺序编号，本字段标识本报文段所发送数据的第一个字节的序号。<br>确认号（<strong>小写ack</strong>）：期望收到对方下一个报文段的第一个数据字节的序号。若确认号为N，则证明到序号N-1为止的所有数据都已正确收到。<br>数据偏移（首部长度）：TCP报文段的数据起始处距离TCP报文段的起始处有多远，以4B为单位，即一个数值是4B。<br><em>紧急位URG</em>：URG=1时，标明此报文段中有紧急数据，是高优先级的数据，应尽快传送，不用在缓存里排队，配合紧急指针字段使用。<br><em>确认位ACK</em>：ACK=1时确认号有效，在连接建立后所有传送的报文段都必须把ACK置为1.<br><em>推送位PSH</em>：PSH=1时，接收方尽快交付接受应用进程，不再等到缓存填满再向上交付。<br><em>复位RST</em>：RST=1时，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立传输链接。<br><em>同步位SYN</em>：SYN=1时，表明是一个连接请求/连接接收报文。<br><em>终止位FIN</em>：FIN=1时，表明此报文段发送方数据已发送完，要求释放连接。<br>窗口：指的是发送本报文段的一方的接收窗口，即现在允许对方发送的数据量。<br>校验和：校验首部+数据，检验时要加上12B伪首部，第四个字段为6.<br>紧急指针：URG=1时才有意义，指出本报文段中紧急数据的字节数。<br>选项：最大报文段长度MSS、窗口扩大、时间戳、选择确认······</li>
</ul>
<h2 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h2><p>TCP连接的建立采用客户服务器方式，主动发起连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫服务器。<br><em><strong>“三次握手”</strong></em>：<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/three_shake.png"><br>SYN洪范攻击：攻击者发送TCP SYN，SYN是TCP三次握手中的第一个数据包，而当服务器返回ACK后，该攻击者就不对其进行再确认，那这个TCP连接就处于挂起状态，也就是所谓的半连接状态，服务器收不到再确认的话，还会重复发送ACK给攻击者。这样更加会浪费服务器的资源。攻击者就对服务器发送大量的这种TCP连接，由于每一个都没法完成三次握手，所以在服务器上，这些TCP连接会因为挂起状态而消耗CPU和内存，最后服务器可能死机，就无法为正常用户提供服务了。<br><em><strong>“四次握手”</strong></em>：<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/four_shake.png"></p>
<h2 id="TCP可靠传输"><a href="#TCP可靠传输" class="headerlink" title="TCP可靠传输"></a>TCP可靠传输</h2><p>可靠：保证接收方进程从缓存区读出的字节流与发送方发出的字节流是完全一样的。<br>重传：确认重传不分家，TCP的发送方在规定的时间内没有收到确认就要重传已发送的报文段。<br>冗余ACK：每当比期望序号大的失序报文段到达时，发送一个冗余ACK，指明下一个期待字节的序号。  </p>
<h2 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h2><p>流量控制：让发送方慢点，要让接收方来得及接受。（TCP利用滑动窗口机制实现流量控制）<br>在通信过程中，接收方根据自己接受缓存的大小，动态地调整发送方的发送窗口大小，即接收窗口rwnd（接收方设置确认报文段的窗口字段来将rwnd通知给发送方），发送方的发送窗口取接受窗口rwnd和拥塞窗口cwnd的最小值。<br>TCP为每一个连接设有一个持续计时器，只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。若持续计时器设置的时间到期，就发送一个零窗口探测报文段。接收方收到探测报文段。接收方收到探测报文段时给出现在的窗口值。若窗口仍然是0，那么发送方就重新设置持续计时器。  </p>
<h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h2><h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h3><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/slow_start.png">  </p>
<h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E8%BE%93%E5%B1%82/swift_recover.png"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>第二章-物理层</title>
    <url>/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%89%A9%E7%90%86%E5%B1%82/</url>
    <content><![CDATA[<p>任务：实现相邻节点之间的比特（0或1）的传输</p>
<h2 id="通信基础"><a href="#通信基础" class="headerlink" title="通信基础"></a>通信基础</h2><ul>
<li>信源：信号的来源  </li>
<li>信宿：信号的“归宿”</li>
<li>数据：信息的实体</li>
<li>信道：信号的通道  </li>
<li>信号：<ul>
<li>数字信号：离散的</li>
<li>模拟信号：连续的</li>
</ul>
</li>
<li>码元：对应一种信号 <strong>1码元=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="5.85ex" height="2.034ex" role="img" focusable="false" viewbox="0 -694 2585.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g></g></g></svg></mjx-container>bit</strong></li>
<li>码元宽度：信号周期</li>
<li>波特率：每秒钟传输的码元数码元/秒</li>
</ul>
<h2 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h2><p>奈奎斯特定理：<em><strong>对于一个理想低通信道（没有噪声、带宽有限的信道）</strong></em> 极限波特率=2W（波特即码元/秒）即**极限波特率=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.352ex" height="2.034ex" role="img" focusable="false" viewbox="0 -694 4133.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(1548,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1846,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(2331,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mi" transform="translate(3244.6,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g></g></g></svg></mjx-container>**【W为带宽】  </p>
<ul>
<li>如果波特率太高，会导致“码间串扰”，即接收方无法识别码元</li>
<li>带宽越大，信道传输码元的能力越强</li>
<li>并未对一个码元最多可以携带多少比特做出解释</li>
</ul>
<p>香农定理：<em><strong>对于一个有噪声、带宽有限的信道</strong></em>，极限比特率=W<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="11.912ex" height="2.8ex" role="img" focusable="false" viewbox="0 -892.5 5264.9 1237.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mo" transform="translate(1696.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(2085.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2807.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mfrac" transform="translate(3808,0)"><g data-mml-node="mi" transform="translate(305.9,394) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><rect width="827.9" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(4875.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>  (b/s)<br>信噪比=S/N=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="8.994ex" height="3.447ex" role="img" focusable="false" viewbox="0 -1011.8 3975.5 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">噪</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">声</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">功</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">号</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">功</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g></g><rect width="3735.5" height="60" x="120" y="220"/></g></g></g></svg></mjx-container>=10<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.238ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4083.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mi" transform="translate(2050.1,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2695.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(3195.1,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g></g></svg></mjx-container>(db分贝)</p>
<ul>
<li>提升信道带宽、加强信号功率、降低噪声功率，都可以提高信道的极限比特率</li>
<li>在带宽、信噪比确定的信道上，一个码元可以携带的比特数是有上限的</li>
</ul>
<h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><h3 id="数据编码转换为数字信号（编码）"><a href="#数据编码转换为数字信号（编码）" class="headerlink" title="数据编码转换为数字信号（编码）"></a>数据编码转换为数字信号（编码）</h3><ul>
<li>不归零编码（NRZ）：低0高1，中不变（没有自同步能力，不浪费带宽，抗干扰能力弱）</li>
<li>归零编码（RZ）：低0高1，中归0（有自同步能力，浪费带宽，抗干扰能力弱）</li>
<li>反向非归零编码（NRZI）：跳0不跳1看起点，中不变（若增加冗余位，可支持自同步，会浪费一点带宽，抗干扰能力弱）</li>
<li>曼彻斯特编码：跳0反跳1看中间，中必变（有自同步能力，浪费带宽，抗干扰能力强） <em>以太网常用曼彻斯特编码</em></li>
<li>差分曼彻斯特编码：跳0不跳1看起点，中必变 （有自同步能力，浪费带宽，抗干扰能力强）</li>
</ul>
<h3 id="数字数据转换为模拟信号（调制）"><a href="#数字数据转换为模拟信号（调制）" class="headerlink" title="数字数据转换为模拟信号（调制）"></a>数字数据转换为模拟信号（调制）</h3><ul>
<li>调幅（AM或ASK）：通过改变载波的振幅来表示数字0或1</li>
<li>调频（FM或FSK）：通过改变载波的频率来表示数字信号1和0</li>
<li>调相（PM或PSK）：通过改变载波的相位来表示数字1和0</li>
<li>正交幅度调制（QAM）：在频率相同的前提下，将AM与PM结合起来，形成叠加信号。设波特率为B，采用m个相位，每个相位有n种振幅则数据传输速率R为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="13.634ex" height="2.034ex" role="img" focusable="false" viewbox="0 -694 6026.1 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mi" transform="translate(2851.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(3149.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(3634.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mi" transform="translate(4548.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5426.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container></li>
</ul>
<h2 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h2><p><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%89%A9%E7%90%86%E5%B1%82/%E5%8F%8C%E7%BB%9E%E7%BA%BF.png"><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%89%A9%E7%90%86%E5%B1%82/%E5%90%8C%E8%BD%B4%E7%94%B5%E7%BC%86.png"><img lazyload src="/images/loading.svg" data-src="/2024/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%89%A9%E7%90%86%E5%B1%82/%E5%85%89%E7%BA%A4.png"></p>
<ul>
<li>10Base5——10Mbps,同轴电缆,最远传输距离500m</li>
<li>10BaseF*——10Mbps,光纤。*可以是其他信息</li>
<li>10BaseT*——10Mbps，双绞线。*可以是其他信息</li>
</ul>
<h3 id="无线传输介质"><a href="#无线传输介质" class="headerlink" title="无线传输介质"></a>无线传输介质</h3><ul>
<li>无线电波：穿透能力强、传输距离长、信号指向性弱（手机信号、WiFi）</li>
<li>微波通信：频率带宽高、信号指向性强、保密性差（卫星通信）</li>
<li>红外通信、激光通信等（信号指向性强）</li>
</ul>
<h3 id="物理层接口特性"><a href="#物理层接口特性" class="headerlink" title="物理层接口特性"></a>物理层接口特性</h3><ul>
<li>机械特性：指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等</li>
<li>电气特性：指明在接口电缆的各条线上出现的电压的范围、传输速率、距离限制等</li>
<li>功能特性：指明某条线上出现的某一点平的电压的意义</li>
<li>过程特性：指明对于不同功能的各种可能时间的出现顺序</li>
</ul>
<h2 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h2><p>中继器：中继器只有两个端口。通过一个端口接收信号，将失真信号整形再生，并转发至另一个端口，<em>仅支持半双工通信</em>，两个端口对应两个“网段”<br>集线器：本质上是多端口中继器。集线器将其中一个端口接收到的信号整形再生后，转发到其他端口，各端口连接的结点不可同时发送数据，会导致“冲突”，集线器的N个端口对应N个“网段”，各网段属于同一个“冲突域”  </p>
<ul>
<li>集线器、中继器不能无线串联</li>
<li>集线器连接的网络，物理上是星型拓扑，逻辑上是总线型拓扑</li>
<li>集线器链接的各网段“共享带宽”</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>第二章-进程管理</title>
    <url>/2024/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>程序：是静态的，就是个存放在磁盘里的可执行文件，就是一系列的指令集和<br>进程：是动态的，是程序的一次执行过程，是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。<br>PCB是进程存在的唯一标志。<br>一个进程实体（进程映象）由PCB、程序段、数据段组成。进程是动态的，进程实体是静态的。<br>进程的特征：动态性、并发性、独立性、异步性、结构性  </p>
<h1 id="进程的状态与转换"><a href="#进程的状态与转换" class="headerlink" title="进程的状态与转换"></a>进程的状态与转换</h1><p>创建态：操作系统为进程分配资源、初始化PCB<br>就绪态：已经具备运行条件，但由于没有空闲CPU，就暂时不能运行<br>运行态：在CPU上运行<br>阻塞态：请求等待某个事件的发生，在这个事件发生之前，进程无法继续往下执行<br>终止态：执行exit系统调用，请求操作系统终止该进程，并回收内存空间等资源，最后回收PCB<br>==进程不可能由阻塞态直接转换为运行态，也不能有就绪态直接转换为阻塞态==<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/PTransform.png">  使用<strong>链接队列</strong>或者<strong>索引</strong>方式进行组织。  </p>
<hr>
<h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><h2 id="进程控制：对系统中的所有进程是是有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。（原语实现）-“关中断”：不在例行检查中断信号-“开中断”：恢复检查中断信号-进程的创建-申请空白PCB-为新进程分配所需资源-初始化PCB-将PCB插入就绪队列实例：用户登录、作业调度、提供服务、应用请求-进程终止-从PCB集合中找到终止进程的PCB-若进程正在执行，立即剥夺CPU，将CPU分配给其他进程-终止其所有子进程（进程之间的关系是树形结构）-将该进程拥有的所有资源归还给父进程或操作系统-删除PCB引起事件：正常结束、异常结束、外界干预-阻塞原语运行态-阻塞态-找到要阻塞的进程对应的PCB-保护进程运行现场，将PCB状态信息设置为“阻塞态”，暂时停止进程运行-将PCB插入响应时间的等待队列引起事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作-唤醒原语阻塞态-就绪态-在事件等待队列中找到PCB-将PCB从等待队列移除，设置进程为就绪态-将PCB插入就绪队列，等待被调度引起事件：等待的事件发生-切换原语运行态-就绪态，就绪态-运行态-将运行环境信息存入PCB-PCB移入相应队列-选择另一个进程执行，并更新其PCB-根据PCB恢复新进程所需的运行环境引起事件：当前进程时间片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止PSW：程序状态字寄存器PC：程序计数器，存放下一条指令的地址IR：指令寄存器，存放当前正在执行的指令通用寄存器：其他一些必要信息-进程通信进程间的通信：两个进程之间产生数据交互。-共享存储通过“增加页表项-段表项”即可将同一片共享内存区映射到各个进程的地址空间中。为避免出错，各个进程对共享空间的访问应该是互斥的。各个进程可使用操作系统内核提供的同步互斥工具。-基于存储区的共享：操作系统在内存中划出一块共享存储区，数据的形式、存放位置都由通信进程控制，而不是操作系统。这种共享方式速度很快，是一种高级通信方式-基于数据结构的共享：比如共享空间里只能放一个长度为10的数组。这种共享方式速度慢、限制多，是一种低级通信方式。-消息传递进程间的数据交换以格式化的消息为单位。进程通过操作系统提供的“发送消息-接收消息”两个原语进行数据交换。-直接通信：消息发送进程要指明接收进程的ID-间接通信（信箱通信方式）：通过“信箱”间接地通信。-管道通信“管道”：是一个特殊的共享文件，又名pipe文件。其实就是在内存中开辟了一个大小固定的内存缓冲区。（先进先出，循环队列）管道只能支持半双工通信，某一时间段内只能是西安单向的传输。如果要实现双向同时通信，则需要设置两个管道。各进程要互斥地访问管道（由操作系统实现）当管道写满时，写进程将堵塞，直到读进程将管道中的数据取走，即可唤醒写进程。当管道读空时，读进程将阻塞，直到写进程往管道中写入数据，即可唤醒读进程。管道中的数据一旦被读出，就彻底消失。因此多个进程读一个管道时，可能会错乱：-一个管道允许多个写进程，一个读进程-允许有多个写进程，多个读进程，但系统会让多个读进程轮流从管道中读数据"><a href="#进程控制：对系统中的所有进程是是有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。（原语实现）-“关中断”：不在例行检查中断信号-“开中断”：恢复检查中断信号-进程的创建-申请空白PCB-为新进程分配所需资源-初始化PCB-将PCB插入就绪队列实例：用户登录、作业调度、提供服务、应用请求-进程终止-从PCB集合中找到终止进程的PCB-若进程正在执行，立即剥夺CPU，将CPU分配给其他进程-终止其所有子进程（进程之间的关系是树形结构）-将该进程拥有的所有资源归还给父进程或操作系统-删除PCB引起事件：正常结束、异常结束、外界干预-阻塞原语运行态-阻塞态-找到要阻塞的进程对应的PCB-保护进程运行现场，将PCB状态信息设置为“阻塞态”，暂时停止进程运行-将PCB插入响应时间的等待队列引起事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作-唤醒原语阻塞态-就绪态-在事件等待队列中找到PCB-将PCB从等待队列移除，设置进程为就绪态-将PCB插入就绪队列，等待被调度引起事件：等待的事件发生-切换原语运行态-就绪态，就绪态-运行态-将运行环境信息存入PCB-PCB移入相应队列-选择另一个进程执行，并更新其PCB-根据PCB恢复新进程所需的运行环境引起事件：当前进程时间片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止PSW：程序状态字寄存器PC：程序计数器，存放下一条指令的地址IR：指令寄存器，存放当前正在执行的指令通用寄存器：其他一些必要信息-进程通信进程间的通信：两个进程之间产生数据交互。-共享存储通过“增加页表项-段表项”即可将同一片共享内存区映射到各个进程的地址空间中。为避免出错，各个进程对共享空间的访问应该是互斥的。各个进程可使用操作系统内核提供的同步互斥工具。-基于存储区的共享：操作系统在内存中划出一块共享存储区，数据的形式、存放位置都由通信进程控制，而不是操作系统。这种共享方式速度很快，是一种高级通信方式-基于数据结构的共享：比如共享空间里只能放一个长度为10的数组。这种共享方式速度慢、限制多，是一种低级通信方式。-消息传递进程间的数据交换以格式化的消息为单位。进程通过操作系统提供的“发送消息-接收消息”两个原语进行数据交换。-直接通信：消息发送进程要指明接收进程的ID-间接通信（信箱通信方式）：通过“信箱”间接地通信。-管道通信“管道”：是一个特殊的共享文件，又名pipe文件。其实就是在内存中开辟了一个大小固定的内存缓冲区。（先进先出，循环队列）管道只能支持半双工通信，某一时间段内只能是西安单向的传输。如果要实现双向同时通信，则需要设置两个管道。各进程要互斥地访问管道（由操作系统实现）当管道写满时，写进程将堵塞，直到读进程将管道中的数据取走，即可唤醒写进程。当管道读空时，读进程将阻塞，直到写进程往管道中写入数据，即可唤醒读进程。管道中的数据一旦被读出，就彻底消失。因此多个进程读一个管道时，可能会错乱：-一个管道允许多个写进程，一个读进程-允许有多个写进程，多个读进程，但系统会让多个读进程轮流从管道中读数据" class="headerlink" title="进程控制：对系统中的所有进程是是有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。（原语实现）+ “关中断”：不在例行检查中断信号+ “开中断”：恢复检查中断信号## 进程的创建+ 申请空白PCB+ 为新进程分配所需资源+ 初始化PCB+ 将PCB插入就绪队列实例：用户登录、作业调度、提供服务、应用请求## 进程终止+ 从PCB集合中找到终止进程的PCB+ 若进程正在执行，立即剥夺CPU，将CPU分配给其他进程+ 终止其所有子进程（进程之间的关系是树形结构）+ 将该进程拥有的所有资源归还给父进程或操作系统+ 删除PCB引起事件：正常结束、异常结束、外界干预## 阻塞原语运行态->阻塞态+ 找到要阻塞的进程对应的PCB+ 保护进程运行现场，将PCB状态信息设置为“阻塞态”，暂时停止进程运行+ 将PCB插入响应时间的等待队列引起事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作## 唤醒原语阻塞态->就绪态+ 在事件等待队列中找到PCB+ 将PCB从等待队列移除，设置进程为就绪态+ 将PCB插入就绪队列，等待被调度引起事件：等待的事件发生## 切换原语运行态->就绪态，就绪态->运行态+ 将运行环境信息存入PCB+ PCB移入相应队列+ 选择另一个进程执行，并更新其PCB+ 根据PCB恢复新进程所需的运行环境引起事件：当前进程时间片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止PSW：程序状态字寄存器PC：程序计数器，存放下一条指令的地址IR：指令寄存器，存放当前正在执行的指令通用寄存器：其他一些必要信息# 进程通信进程间的通信：两个进程之间产生数据交互。## 共享存储通过“增加页表项/段表项”即可将同一片共享内存区映射到各个进程的地址空间中。为避免出错，各个进程对共享空间的访问应该是互斥的。各个进程可使用操作系统内核提供的同步互斥工具。+ 基于存储区的共享：操作系统在内存中划出一块共享存储区，数据的形式、存放位置都由通信进程控制，而不是操作系统。这种共享方式速度很快，是一种高级通信方式+ 基于数据结构的共享：比如共享空间里只能放一个长度为10的数组。这种共享方式速度慢、限制多，是一种低级通信方式。## 消息传递进程间的数据交换以格式化的消息为单位。进程通过操作系统提供的“发送消息/接收消息”两个原语进行数据交换。+ 直接通信：消息发送进程要指明接收进程的ID+ 间接通信（信箱通信方式）：通过“信箱”间接地通信。## 管道通信“管道”：是一个特殊的共享文件，又名pipe文件。其实就是在内存中开辟了一个大小固定的内存缓冲区。（先进先出，循环队列）管道只能支持半双工通信，某一时间段内只能是西安单向的传输。如果要实现双向同时通信，则需要设置两个管道。各进程要互斥地访问管道（由操作系统实现）当管道写满时，写进程将堵塞，直到读进程将管道中的数据取走，即可唤醒写进程。当管道读空时，读进程将阻塞，直到写进程往管道中写入数据，即可唤醒读进程。管道中的数据一旦被读出，就彻底消失。因此多个进程读一个管道时，可能会错乱：+ ==一个管道允许多个写进程，一个读进程==+ 允许有多个写进程，多个读进程，但系统会让多个读进程轮流从管道中读数据"></a>进程控制：对系统中的所有进程是是有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。（原语实现）<br>+ “关中断”：不在例行检查中断信号<br>+ “开中断”：恢复检查中断信号<br>## 进程的创建<br>+ 申请空白PCB<br>+ 为新进程分配所需资源<br>+ 初始化PCB<br>+ 将PCB插入就绪队列<br>实例：用户登录、作业调度、提供服务、应用请求<br>## 进程终止<br>+ 从PCB集合中找到终止进程的PCB<br>+ 若进程正在执行，立即剥夺CPU，将CPU分配给其他进程<br>+ 终止其所有子进程（进程之间的关系是树形结构）<br>+ 将该进程拥有的所有资源归还给父进程或操作系统<br>+ 删除PCB<br>引起事件：正常结束、异常结束、外界干预<br>## 阻塞原语<br>运行态-&gt;阻塞态<br>+ 找到要阻塞的进程对应的PCB<br>+ 保护进程运行现场，将PCB状态信息设置为“阻塞态”，暂时停止进程运行<br>+ 将PCB插入响应时间的等待队列<br>引起事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作<br>## 唤醒原语<br>阻塞态-&gt;就绪态<br>+ 在事件等待队列中找到PCB<br>+ 将PCB从等待队列移除，设置进程为就绪态<br>+ 将PCB插入就绪队列，等待被调度<br>引起事件：等待的事件发生<br>## 切换原语<br>运行态-&gt;就绪态，就绪态-&gt;运行态<br>+ 将运行环境信息存入PCB<br>+ PCB移入相应队列<br>+ 选择另一个进程执行，并更新其PCB<br>+ 根据PCB恢复新进程所需的运行环境<br>引起事件：当前进程时间片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止<br>PSW：程序状态字寄存器<br>PC：程序计数器，存放下一条指令的地址<br>IR：指令寄存器，存放当前正在执行的指令<br>通用寄存器：其他一些必要信息<br># 进程通信<br>进程间的通信：两个进程之间产生数据交互。<br>## 共享存储<br>通过“增加页表项/段表项”即可将同一片共享内存区映射到各个进程的地址空间中。<br>为避免出错，各个进程对共享空间的访问应该是互斥的。各个进程可使用操作系统内核提供的同步互斥工具。<br>+ 基于存储区的共享：操作系统在内存中划出一块共享存储区，数据的形式、存放位置都由通信进程控制，而不是操作系统。这种共享方式速度很快，是一种高级通信方式<br>+ 基于数据结构的共享：比如共享空间里只能放一个长度为10的数组。这种共享方式速度慢、限制多，是一种低级通信方式。<br>## 消息传递<br>进程间的数据交换以格式化的消息为单位。进程通过操作系统提供的“发送消息/接收消息”两个原语进行数据交换。<br>+ 直接通信：消息发送进程要指明接收进程的ID<br>+ 间接通信（信箱通信方式）：通过“信箱”间接地通信。<br>## 管道通信<br>“管道”：是一个特殊的共享文件，又名pipe文件。其实就是在内存中开辟了一个大小固定的内存缓冲区。（先进先出，循环队列）<br>管道只能支持半双工通信，某一时间段内只能是西安单向的传输。如果要实现双向同时通信，则需要设置两个管道。<br>各进程要互斥地访问管道（由操作系统实现）<br>当管道写满时，写进程将堵塞，直到读进程将管道中的数据取走，即可唤醒写进程。<br>当管道读空时，读进程将阻塞，直到写进程往管道中写入数据，即可唤醒读进程。<br>管道中的数据一旦被读出，就彻底消失。因此多个进程读一个管道时，可能会错乱：<br>+ ==一个管道允许多个写进程，一个读进程==<br>+ 允许有多个写进程，多个读进程，但系统会让多个读进程轮流从管道中读数据</h2><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>线程是一个基本的CPU执行单元，也是程序执行流的最小单位，是操作系统中最小的调度单位。<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/Differnence.png">  </p>
<ul>
<li>线程是处理及调度的单位</li>
<li>多CPU计算机中，各个线程客栈用不同的CPU</li>
<li>每个线程都有一个线程ID、线程控制块</li>
<li>线程也有就绪、阻塞、运行三种基本状态</li>
<li>线程几乎不拥有系统资源</li>
<li>同一进程的不同线程之间共享进程的资源</li>
<li>由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预</li>
<li>同一进程中的线程切换，不会引起进程切换</li>
<li>切换同进程内的线程，系统开销小；切换进程，系统开销大</li>
</ul>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p><strong>用户级线程</strong>：线程的管理工作由线程库完成，线程切换不需要CPU变态，操作系统意识不到用户级线程的存在。（”代码逻辑“的载体）<br>优点：不需要切换到核心态，线程管理的系统开销小，效率高。<br>缺点：当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。多个线程不可在多核处理机上并行运行。<br><strong>内核级线程</strong>：线程的管理工作由操作系统完成，线程切换需要CPU变态。（运行机会的载体）<br>优点：并发能力强，多线程可在多核处理及上并行执行。<br>缺点：需要切换内核态，线程管理成本高，开销大。<br><strong>多线程</strong>：</p>
<ul>
<li>一对一模型：一个用户及线程映射到一个内核级线程。每个用户进程有与用户级线程同数量的内核级线程。<ul>
<li>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。多线程可在多核处理机上并行执行</li>
<li>缺点：需要切换内核态，线程管理成本高，开销大。</li>
</ul>
</li>
<li>多对一模型：多个用户级线程映射到一个内核级线程。且一个进程只被分配一个内核级线程。<ul>
<li>不需要切换核心态，系统开销小，效率高</li>
<li>并发度不高，多个线程不可在多核处理机上并行运行</li>
</ul>
</li>
<li>多对多模型：n用户及线程线程映射到m个内核级线程（n&gt;=m）。每个用户进程对应m各内核级线程。（克服了一对一模型和多对一模型的缺点）<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/Transform.png"><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/TCB.png"></li>
</ul>
<h1 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h1><p>高级调度(作业调度)：按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。每个作业只调入一次，调出一次。作业调入时会建立PCB，调出时才撤销PCB。(无-&gt;创建态-&gt;就绪态)<br>低级调度（进程调度/处理机调度）：按照某种策略从就绪队列中选取一个进程，将处理机分配给它。（进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。进程调度的频率很高，一般几十毫秒一次，就绪态-&gt;运行态）<br>中级调度（内存调度）：按照某种策略决定将哪个处于挂起状态的进程重新调入内存。（挂起态-&gt;就绪态）<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/7_station.png"><br>不能进行进程调度与切换的情况：</p>
<ul>
<li>在处理中断的过程中。中断处理过程复杂，与硬件密切相关，很难做到在中断处理过程中进行进程切换。</li>
<li>进程在操作系统内核程序临界区（一般是用来访问某种内核数据结构）中</li>
<li>在原子操作过程中。原子操作不可中断，要一气呵成。<br>进程调度的方式：</li>
<li>非剥夺调度方式：实现简单，系统开销小，无法及时处理紧急任务</li>
<li>剥夺调度方式：适合于分时操作系统、实时操作系统<br>“狭义的进程调度”与“进程切换”的区别：</li>
<li>==狭义的进程调度==是指从就绪队列中选中一个要运行的进程</li>
<li>进程切换是指一个进程让出处理机，有另一个进程占用处理机的过程<ul>
<li>对原来运行进程各种数据的保存</li>
<li>对新的进程各种数据的恢复</li>
</ul>
</li>
</ul>
<h2 id="什么事件会触发“调度程序”-创建新进程-进程退出-运行进程阻塞-I-O中断发生-非抢占式调度策略只有运行进程阻塞或退出才出发调度程序工作-抢占式调度策略，每个时钟中断或k个时钟中断会触发调度程序工作闲逛进程（调度程序永远的备胎）：-优先级最低-可以是0地址指令，占一个完整的指令周期-能耗低"><a href="#什么事件会触发“调度程序”-创建新进程-进程退出-运行进程阻塞-I-O中断发生-非抢占式调度策略只有运行进程阻塞或退出才出发调度程序工作-抢占式调度策略，每个时钟中断或k个时钟中断会触发调度程序工作闲逛进程（调度程序永远的备胎）：-优先级最低-可以是0地址指令，占一个完整的指令周期-能耗低" class="headerlink" title="什么事件会触发“调度程序”+ 创建新进程+ 进程退出+ 运行进程阻塞+ I/O中断发生+ 非抢占式调度策略只有运行进程阻塞或退出才出发调度程序工作+ 抢占式调度策略，每个时钟中断或k个时钟中断会触发调度程序工作闲逛进程（调度程序永远的备胎）：+ 优先级最低+ 可以是0地址指令，占一个完整的指令周期+ 能耗低"></a>什么事件会触发“调度程序”<br>+ 创建新进程<br>+ 进程退出<br>+ 运行进程阻塞<br>+ I/O中断发生<br>+ 非抢占式调度策略只有运行进程阻塞或退出才出发调度程序工作<br>+ 抢占式调度策略，每个时钟中断或k个时钟中断会触发调度程序工作<br>闲逛进程（调度程序永远的备胎）：<br>+ 优先级最低<br>+ 可以是0地址指令，占一个完整的指令周期<br>+ 能耗低</h2><h1 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h1><h2 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h2><p>指cpu“忙碌”的事件占总时间的比例（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="18.799ex" height="3.447ex" role="img" focusable="false" viewbox="0 -1011.8 8309.1 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">利</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mo" transform="translate(3277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(4333.6,0)"><g data-mml-node="mrow" transform="translate(220,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">忙</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">碌</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><g data-mml-node="mrow" transform="translate(927.1,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="3735.5" height="60" x="120" y="220"/></g></g></g></svg></mjx-container>）</p>
<h2 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h2><p>单位时间内完成作业的数量（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="28.123ex" height="3.447ex" role="img" focusable="false" viewbox="0 -1011.8 12430.4 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">系</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">统</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">吞</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">吐</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mo" transform="translate(5277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(6333.6,0)"><g data-mml-node="mrow" transform="translate(220,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">共</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">完</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g></g><g data-mml-node="mrow" transform="translate(927.1,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">共</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">花</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="5856.9" height="60" x="120" y="220"/></g></g></g></svg></mjx-container>）</p>
<h2 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h2><p>指从作业被提交给系统开始，到作业完成为止的这段时间间隔<br>包括四个部分：作业在外存后备队列上等待作业调度的时间、进程在就绪队列上等待作业调度的时间、进程在CPU上执行的时间、进程等待I/O操作完成的时间<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.077ex;" xmlns="http://www.w3.org/2000/svg" width="200.504ex" height="5.285ex" role="img" focusable="false" viewbox="0 -1418 88622.7 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,-8)"><g data-mml-node="mtd"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">转</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(4277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(5333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(6333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(7333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">完</text></g><g data-mml-node="mi" transform="translate(8333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g><g data-mml-node="mi" transform="translate(9333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(10333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(11555.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(12556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(13556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(14556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">提</text></g><g data-mml-node="mi" transform="translate(15556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">交</text></g><g data-mml-node="mi" transform="translate(16556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(17556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mtext" transform="translate(18556,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(18806,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">平</text></g><g data-mml-node="mi" transform="translate(19806,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">均</text></g><g data-mml-node="mi" transform="translate(20806,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(21806,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">转</text></g><g data-mml-node="mi" transform="translate(22806,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(23806,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(25083.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(26139.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">各</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">转</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">之</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g><g data-mml-node="mrow" transform="translate(3220,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g></g><rect width="9200" height="60" x="120" y="220"/></g><g data-mml-node="mtext" transform="translate(35579.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(35829.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">带</text></g><g data-mml-node="mi" transform="translate(36829.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">权</text></g><g data-mml-node="mi" transform="translate(37829.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(38829.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">转</text></g><g data-mml-node="mi" transform="translate(39829.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(40829.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(42107.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(43163.1,0)"><g data-mml-node="mrow" transform="translate(1720,676)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">转</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">实</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">际</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">运</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="9200" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(52880.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(53936.7,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">完</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(6222.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(7222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(8222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(9222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">提</text></g><g data-mml-node="mi" transform="translate(10222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">交</text></g><g data-mml-node="mi" transform="translate(11222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(12222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><g data-mml-node="mrow" transform="translate(2331.2,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">实</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">际</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">运</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="13422.4" height="60" x="120" y="220"/></g><g data-mml-node="mtext" transform="translate(67599.1,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(67849.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">平</text></g><g data-mml-node="mi" transform="translate(68849.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">均</text></g><g data-mml-node="mi" transform="translate(69849.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">带</text></g><g data-mml-node="mi" transform="translate(70849.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">权</text></g><g data-mml-node="mi" transform="translate(71849.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(72849.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">转</text></g><g data-mml-node="mi" transform="translate(73849.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(74849.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(76126.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(77182.7,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">各</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">带</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">权</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">转</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">之</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g><g data-mml-node="mrow" transform="translate(4220,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">业</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g></g><rect width="11200" height="60" x="120" y="220"/></g></g></g></g></g></g></svg></mjx-container></p>
<h2 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h2><p>指作业/进程处于等待处理机状态之和，等待时间越长，用户满意度越低。  </p>
<ul>
<li>对于进程，等待时间就是指进程建立之后等待被服务的时间之和，在等待I/O完成的期间其实进程也是被服务的，所以不计入等待时间</li>
<li>对于作业，不仅要考虑建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间</li>
</ul>
<h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><p>只从用户提交请求到首次响应所用的时间</p>
<h1 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h1><h2 id="先来先服务（FCFS）"><a href="#先来先服务（FCFS）" class="headerlink" title="先来先服务（FCFS）"></a>先来先服务（FCFS）</h2><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/FCFS.png"></p>
<h2 id="短作业优先（SJF）"><a href="#短作业优先（SJF）" class="headerlink" title="短作业优先（SJF）"></a>短作业优先（SJF）</h2><p>短作业/进程优先算法默认是非抢占式<br>在所有进程同时可运行时，采用SJF调度算法的平均等待时间、平均周转时间最少<br>相比于其他算法，SJF依然可以获得较少的平均等待时间、平均周转时间<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/SJF.png"></p>
<h2 id="高响应比优先（HRRN）"><a href="#高响应比优先（HRRN）" class="headerlink" title="高响应比优先（HRRN）"></a>高响应比优先（HRRN）</h2><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/HRRN.png">  </p>
<hr>
<h2 id="时间片轮转调度算法（RR）"><a href="#时间片轮转调度算法（RR）" class="headerlink" title="时间片轮转调度算法（RR）"></a>时间片轮转调度算法（RR）</h2><p>如果时间片太大，使得每个进程都可以在一个时间片内就完成，则时间片轮转调度算法退化为先来先服务调度算法，并且会增大进程响应时间，因此时间片不能太大。<br>如果时间片太小，会导致进程切换过于频繁，系统会花大量时间来处理进程切换，从而导致实际用于进程执行的时间比例减少。可见时间片不能太小。<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/RR.png"></p>
<h2 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h2><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/first_priority.png"> </p>
<h2 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h2><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/LayerDrawBackQueue.png"><br>系统进程&gt;交互式进程&gt;批处理进程  </p>
<hr>
<h1 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h1><p>一个时间段内只允许一个进程使用的资源称为临界资源。<br>进入区和退出区是负责实现互斥的代码段。  </p>
<ul>
<li>空闲让进</li>
<li>忙则等待</li>
<li>有限等待</li>
<li>让权等待</li>
</ul>
<h2 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h2><h3 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h3><p>两个进程在访问完临界区后会把使用临界区的权限转交给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予。<br>缺点：“空闲让进”</p>
<h3 id="双标志先检查法"><a href="#双标志先检查法" class="headerlink" title="双标志先检查法"></a>双标志先检查法</h3><p>设置一个布尔型数据flag []，数组中各个元素用来标记各进程想进入临界区的意愿，比如“flag[0]=true”意味着0号进程P0现在想要进入临界区。<br>缺点：违反“忙则等待”原则</p>
<h3 id="双标志后检查法"><a href="#双标志后检查法" class="headerlink" title="双标志后检查法"></a>双标志后检查法</h3><p>相对于“双标志先检查法”，先进行“上锁”，在进行“检查”<br>缺点：违背了“空闲让进”和“有限等待”原则，会产生“饥饿”现象</p>
<h3 id="Peterson算法"><a href="#Peterson算法" class="headerlink" title="Peterson算法"></a>Peterson算法</h3><p>如果双方都争着想进入临界区，那可以让进程尝试谦让。<br>缺点：未遵循“让权等待”原则</p>
<h2 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h2><h3 id="中断屏蔽方法"><a href="#中断屏蔽方法" class="headerlink" title="中断屏蔽方法"></a>中断屏蔽方法</h3><p>利用“开/关中断指令”实现<br>优点：简单、高效<br>缺点：不适用于多处理机；只适用于操作系统内核进程，不适用于用户进程</p>
<h3 id="TestAndSet指令"><a href="#TestAndSet指令" class="headerlink" title="TestAndSet指令"></a>TestAndSet指令</h3><p>TSL指令使用硬件实现的，执行的过程不允许被中断，只能一气呵成。（简称TS指令或TSL指令）<br>优点：实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞；适用于多处理机环境。<br>缺点：不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等”  </p>
<h3 id="Swap指令"><a href="#Swap指令" class="headerlink" title="Swap指令"></a>Swap指令</h3><p>也叫XCHG指令，与TS指令相似<br>优点：实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞；适用于多处理机环境。<br>缺点：不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等”  </p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>互斥锁：一个进程在进入临界区时应获得锁；在退出临界区时释放锁。（忙等待）<br>需要连续循环忙等的互斥锁，被称为自旋锁<br>优点：等待期间不用切换进程上下文，多处理机系统中，若上锁的时间短，则等待代价很低，常用于多处理机系统，不适用于单处理机系统。  </p>
<h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><p>用户进程可以通过使用操作系统提供的一对原语来对信号量操作，从而很方便的是西安进程互斥、进程同步。<br>信号量：标识系统中某种资源的数量<br>整形信号量不满足“让权等待”原则，会发生“忙等”；但记录型信号量不会出现这个问题。  </p>
<h3 id="实现进程互斥"><a href="#实现进程互斥" class="headerlink" title="实现进程互斥"></a>实现进程互斥</h3><ol>
<li>分析并发进程的关键活动，划定临界区</li>
<li>设置互斥信号量mutex，初值为1</li>
<li>在进入区P（mutex）–申请资源</li>
<li>在退出区V（mutex）–释放资源<br>对不同的临界资源需要设置不同的互斥信号量。P、V操作必须成对出现。</li>
</ol>
<h3 id="实现进程同步"><a href="#实现进程同步" class="headerlink" title="实现进程同步"></a>实现进程同步</h3><ol>
<li>分析什么地方需要实现“同步关系”，即必须保证“一前一后”执行的两个操作</li>
<li>设置同步信号量S，初始值为0</li>
<li>在“前操作”之后执行V（S）</li>
<li>在“后操作”之前执行P（S）</li>
</ol>
<h2 id="生产者与消费者问题"><a href="#生产者与消费者问题" class="headerlink" title="生产者与消费者问题"></a>生产者与消费者问题</h2><p>系统中有一组生产者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中取出一个产品使用。（生产者、消费者共享一个初始为空、大小为n的缓冲区。只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待。只有缓冲区不空时，消费者才能从中取出产品，否则必须等待。缓冲区是临界资源，各进程必须互斥地访问）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">semophore mutex=1;                   //临界区互斥信号量</span><br><span class="line">semophore empty=n;                   //空闲缓冲区</span><br><span class="line">semophore full=0;                    //缓冲区初始化为空</span><br><span class="line">producer(){                          //生产者进程</span><br><span class="line">	while(1){</span><br><span class="line">		produce an item in nextp;    //生产数据</span><br><span class="line">		P(empty);                    //获取空缓冲区单元</span><br><span class="line">		P(mutex);                    //进入临界区</span><br><span class="line">		add nextp to buffer;         //将数据放入缓冲区</span><br><span class="line">		V(mutex);                    //离开临界区，释放互斥信号量</span><br><span class="line">		V(full);                     //满缓冲区加1</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line">consumer(){                          //消费者进程</span><br><span class="line">	while(1){</span><br><span class="line">		P(full);                     //获取满缓冲区单元</span><br><span class="line">		P(mutex);                    //进入临界区</span><br><span class="line">		remove an item from buffer;  //从缓冲区中取出数据</span><br><span class="line">		V(mutex);                    //离开临界区，释放互斥信号量</span><br><span class="line">		P(empty);                    //空缓冲区数加1</span><br><span class="line">		consume the item;            //消费数据</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h2><p>有读者和写者两组并发进程，共享一个文件，当两个或两个以上地读进程同时访问共享数据时不会产生副作用，但若某个写进程和其它进程（读进程或写进程）同时访问共享数据时则可能导致数据不一致的错误。因此要求：允许多个读者可以同时对文件执行读操作；只允许一个写者往文件中写信息；任一写者在完成写操作之前不允许其他读者或写者工作；写者执行写操作之前，应让已有的读者和写者全部退出。  </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int count=0;          //用于记录当前的读者数量</span><br><span class="line">semaphore mutex=1;    //用于保护更新count变量是的互斥</span><br><span class="line">semaphore rw=1;       //用于保证读者和写着互斥地访问文件</span><br><span class="line">semaphore w=1;        //用于实现“写优先”</span><br><span class="line">writer(){             //写者进程</span><br><span class="line">	while(1){</span><br><span class="line">		P(w);         //在无写进程请求时进入</span><br><span class="line">		P(rw);        //互斥访问共享文件</span><br><span class="line">		writing;      //写入</span><br><span class="line">		V(rw);        //释放共享文件</span><br><span class="line">		V(w);         //恢复对共享文件的访问</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line">reader(){             //读者进程</span><br><span class="line">	while(1){</span><br><span class="line">		P(w);         //在无写进程请求时进入</span><br><span class="line">		P(mutex);     //互斥访问count变量</span><br><span class="line">		if(count==0)  //当一个读进程读共享文件时</span><br><span class="line">			P(rw);    //阻止写进程写</span><br><span class="line">		count++;      //读者计数器加1</span><br><span class="line">		V(mutex);     //释放互斥变量count</span><br><span class="line">		V(w);         //恢复对共享文件的访问</span><br><span class="line">		reading;      //读取</span><br><span class="line">		P(mutex);     //互斥访问count变量</span><br><span class="line">		count--;      //读者计数器减1</span><br><span class="line">		if(count==0)  //当最后一个读进程读完共享文件</span><br><span class="line">			V(rw);    //允许写进程写</span><br><span class="line">		V(mutex);     //释放互斥变量count</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h2><p>一张圆桌上坐着5名哲学家，每两个哲学家之间的桌子摆一根筷子，桌子的中间是一碗米饭。哲学家倾注毕生的精力用于思考和进餐，哲学家在思考时，并不影响他人。只有当哲学家饥饿时，才是试图拿起左、右两根筷子。如果筷子已在他人受伤，则需等待。饥饿的哲学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考。  </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">semaphore chopstick[5]={1,1,1,1,1};  //初始化信号量</span><br><span class="line">semaphore mutex=1;                   //设置取筷子地信号量</span><br><span class="line">Pi(){                                //i号哲学家的进程</span><br><span class="line">	do{</span><br><span class="line">		P(mutex);                    //在取筷子前获得互斥量</span><br><span class="line">		P(chopstick[i]);             //取左边筷子</span><br><span class="line">		P(chopstick[(i+1)%5]);       //取右边筷子</span><br><span class="line">		V(mutex);                    //释放取筷子的信号量</span><br><span class="line">		eat;                         //进餐</span><br><span class="line">		V(chopstick[i]);             //放回左边筷子</span><br><span class="line">		P(chopstick[(i+1)%5]);       //放回右边筷子</span><br><span class="line">		think;                       //思考</span><br><span class="line">	}while(1);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h1 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h1><p>管程是一种特殊的软件模块：</p>
<ul>
<li>局部于管程的共享数据结构说明</li>
<li>对该数据结构进行操作对的一组过程</li>
<li>对局部于管程的共享数据设置初始值的语句；</li>
<li>管程有一个名字；<br>管程的基本特征：</li>
<li>局部于管程的数据只能被局部于管程的过程所访问</li>
<li>一个进程只有通过调用管程内的过程才能进入莞城访问共享数据</li>
<li>每次仅允许一个进程在管程内执行某个内部过程</li>
</ul>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>死锁：各进程互相等待对方手里的资源，导致各进程阻塞，无法推进的现象。<br>饥饿：由于长期得不到想要的资源，某进程无法向前推进的现象。<br>死循环：某进程执行过程中一直跳不出某个循环地现象。<br>死锁发生的条件：</p>
<ul>
<li>互斥条件：只有对必须互斥使用的资源的争抢才会导致死锁</li>
<li>不剥夺条件：进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。  </li>
<li>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程阻塞，但又对自己已有的资源保持不变。  </li>
<li>循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求。</li>
</ul>
<p>发生死锁的时机：</p>
<ul>
<li>对系统资源的竞争</li>
<li>进程推进顺序非法</li>
<li>信号量使用不当<br>死锁地处理策略：</li>
<li>预防死锁</li>
<li>避免死锁：”银行家算法“：在资源分配之前预先判断这次分配是否会导致系统进入不安全状态</li>
<li>死锁的检测和解除<ul>
<li>资源剥夺法</li>
<li>撤销进程法</li>
<li>进程回退法</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>第一章-计算机系统概述</title>
    <url>/2024/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>操作系统：是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配；以提供给用户和其他软件方便的接口和环境；它是计算机系统中最基本的系统软件。  </p>
<ul>
<li>处理机管理</li>
<li>存储器管理</li>
<li>文件管理</li>
<li>设备管理</li>
</ul>
<h2 id="联机命令接口：交互式命令接口脱机命令接口：批处理命令接口GUI：图形化用户界面程序接口：可以在程序中进行-系统调用-来使用程序接口。四个特征：-并发：指两个或多个时间在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。（并行：两个或多个事件在同一时刻同时发生）操作系统和程序并发是一起诞生的。单核CPU同一时刻只能执行一个程序，各个程序只能并发的执行；多核CPU同一时刻可以同时执行多个程序，多个程序可以并行的执行。-共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。-互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源。-同时共享方式：系统中的某些资源，允许一个时间段内多个进程“同时”对他们进行访问。-虚拟：把一个物理上的实体变为若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上对应物是用户感受到的。-空分复用技术-时分复用技术-异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而实走走停停的，以不可预知的速度向前推进。-操作系统的发展进程1-手工操作系统：用户独占全机、人机速度矛盾导致资源利用率低2-批处理阶段-1-单道批处理系统-优点：-缓解了一定程度的人机速度矛盾，资源利用率有所提高-缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量时间是在空闲等待I-O完成。资源利用率依然很低。-2-多道批处理系统-优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大。-缺点：用户响应时间长，没有人机交互功能3-分时操作系统：计算机以时间片为单位轮流为各个用户-作业服务，各个用户可通过终端与计算机进行交互。-优点：用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。-缺点：不能优先处理一些紧急任务。操作系统对各个用户-作业都是完全公平的，循环地为每个用户-作业服务一个时间片，不区分任务的紧急性4-实时操作系统：能够优先相应一些紧急任务，某些紧急任务不需时间片排队，-有及时性和可靠性-硬实时系统-软实时系统5-网络操作系统：实现网络中各种资源的共享和各台计算机之间的通信6-分布式操作系统：特点是分布性和并行性，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务7-个人计算机操作系统"><a href="#联机命令接口：交互式命令接口脱机命令接口：批处理命令接口GUI：图形化用户界面程序接口：可以在程序中进行-系统调用-来使用程序接口。四个特征：-并发：指两个或多个时间在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。（并行：两个或多个事件在同一时刻同时发生）操作系统和程序并发是一起诞生的。单核CPU同一时刻只能执行一个程序，各个程序只能并发的执行；多核CPU同一时刻可以同时执行多个程序，多个程序可以并行的执行。-共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。-互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源。-同时共享方式：系统中的某些资源，允许一个时间段内多个进程“同时”对他们进行访问。-虚拟：把一个物理上的实体变为若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上对应物是用户感受到的。-空分复用技术-时分复用技术-异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而实走走停停的，以不可预知的速度向前推进。-操作系统的发展进程1-手工操作系统：用户独占全机、人机速度矛盾导致资源利用率低2-批处理阶段-1-单道批处理系统-优点：-缓解了一定程度的人机速度矛盾，资源利用率有所提高-缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量时间是在空闲等待I-O完成。资源利用率依然很低。-2-多道批处理系统-优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大。-缺点：用户响应时间长，没有人机交互功能3-分时操作系统：计算机以时间片为单位轮流为各个用户-作业服务，各个用户可通过终端与计算机进行交互。-优点：用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。-缺点：不能优先处理一些紧急任务。操作系统对各个用户-作业都是完全公平的，循环地为每个用户-作业服务一个时间片，不区分任务的紧急性4-实时操作系统：能够优先相应一些紧急任务，某些紧急任务不需时间片排队，-有及时性和可靠性-硬实时系统-软实时系统5-网络操作系统：实现网络中各种资源的共享和各台计算机之间的通信6-分布式操作系统：特点是分布性和并行性，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务7-个人计算机操作系统" class="headerlink" title="联机命令接口：交互式命令接口脱机命令接口：批处理命令接口GUI：图形化用户界面程序接口：可以在程序中进行==系统调用==来使用程序接口。四个特征：+ 并发：指两个或多个时间在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。（并行：两个或多个事件在同一时刻同时发生）操作系统和程序并发是一起诞生的。单核CPU同一时刻只能执行一个程序，各个程序只能并发的执行；多核CPU同一时刻可以同时执行多个程序，多个程序可以并行的执行。+ 共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。    + 互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源。    + 同时共享方式：系统中的某些资源，允许一个时间段内多个进程“同时”对他们进行访问。+ 虚拟：把一个物理上的实体变为若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上对应物是用户感受到的。    + 空分复用技术    + 时分复用技术+ 异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而实走走停停的，以不可预知的速度向前推进。# 操作系统的发展进程1. 手工操作系统：用户独占全机、人机速度矛盾导致资源利用率低2. 批处理阶段    1. 单道批处理系统        + 优点： 缓解了一定程度的人机速度矛盾，资源利用率有所提高        + 缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量时间是在空闲等待I/O完成。资源利用率依然很低。    2. 多道批处理系统        + 优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大。        + 缺点：用户响应时间长，没有人机交互功能3. 分时操作系统：计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。    + 优点：用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。    + 缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性4. 实时操作系统：能够优先相应一些紧急任务，某些紧急任务不需时间片排队，==有及时性和可靠性==    + 硬实时系统    + 软实时系统5. 网络操作系统：实现网络中各种资源的共享和各台计算机之间的通信6. 分布式操作系统：特点是分布性和并行性，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务7. 个人计算机操作系统"></a>联机命令接口：交互式命令接口<br>脱机命令接口：批处理命令接口<br>GUI：图形化用户界面<br>程序接口：可以在程序中进行==系统调用==来使用程序接口。<br>四个特征：<br>+ <strong>并发</strong>：指两个或多个时间在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。（并行：两个或多个事件在同一时刻同时发生）<em>操作系统和程序并发是一起诞生的</em>。单核CPU同一时刻只能执行一个程序，各个程序只能并发的执行；多核CPU同一时刻可以同时执行多个程序，多个程序可以并行的执行。<br>+ <strong>共享</strong>：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。<br>    + 互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源。<br>    + 同时共享方式：系统中的某些资源，允许一个时间段内多个进程“同时”对他们进行访问。<br>+ <strong>虚拟</strong>：把一个物理上的实体变为若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上对应物是用户感受到的。<br>    + 空分复用技术<br>    + 时分复用技术<br>+ <strong>异步</strong>：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而实走走停停的，以不可预知的速度向前推进。<br># 操作系统的发展进程<br>1. 手工操作系统：用户独占全机、人机速度矛盾导致资源利用率低<br>2. 批处理阶段<br>    1. 单道批处理系统<br>        + 优点： 缓解了一定程度的人机速度矛盾，资源利用率有所提高<br>        + 缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量时间是在空闲等待I/O完成。资源利用率依然很低。<br>    2. 多道批处理系统<br>        + 优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大。<br>        + 缺点：用户响应时间长，没有人机交互功能<br>3. 分时操作系统：计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。<br>    + 优点：用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。<br>    + 缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性<br>4. 实时操作系统：能够优先相应一些紧急任务，某些紧急任务不需时间片排队，==有及时性和可靠性==<br>    + 硬实时系统<br>    + 软实时系统<br>5. 网络操作系统：实现网络中各种资源的共享和各台计算机之间的通信<br>6. 分布式操作系统：特点是分布性和并行性，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务<br>7. 个人计算机操作系统</h2><p>CPU存在用户态和内核态：</p>
<ul>
<li>内核态-&gt;用户态：执行一条特权指令–修改PSW的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权</li>
<li>用户态-&gt;内核态：由“中断”引发，硬件自动完成变态过程，触发中断信号意味着操作系统将强行夺回CPU的使用权</li>
</ul>
<p>“中断”：让操作系统内核夺回CPU使用权的唯一途径</p>
<ul>
<li>内中断（异常）：与当前执行的指令有关，来源于CPU内部（陷入【用户态执行】、故障、终止）</li>
<li>外中断：与当前执行的指令无关，来源于CPU外部（时钟中断、I/O中断）</li>
</ul>
<p>不同的中断信号，需要用不同的中断处理程序来处理。当CPU检测到中断信号后，会根据中断信号的类型去查询“中断向量表”，以此来找到响应的中断处理程序在内存中的存放位置。<br>系统调用：是操作系统提供给应用程序使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以通过系统调用来请求获得操作系统内核的服务。<br>凡是与共享资源有关的操作，都必须通过系统调用的方式向操作系统内核提出服务请求</p>
<ul>
<li>设备管理</li>
<li>文件管理</li>
<li>进程控制</li>
<li>进程通信</li>
<li>内存管理</li>
</ul>
<p><code>发出系统调用请求是在用户态，而对系统调用的相应处理在核心态进行</code><br>内核是操作系统最基本、最核心的部分。<br>变态的过程是有成本的，频繁地变态会降低系统性能。<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/body_system.png"> </p>
<ul>
<li>分层结构：每层可单向调用更低一层提供的接口。</li>
<li>模块化：将内核划分为多个模块，多个模块之间相互协作。（内核=主模块+可加载内核模块）</li>
<li>宏内核：所有的系统功能都放在内核里</li>
<li>微内核：只把中断、原语、进程通信等核心功能放入内核，其余功能以用户进程形式运行在用户态（内核足够小、基于C/S模式、应用“机制预测分离”原理、采用面向对象技术）</li>
<li>外核：负责为用户进程分配未经抽象地硬件资源，由外核负责保证资源使用安全</li>
</ul>
<h1 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h1><ol>
<li>CPU从一个特定主存地址开始，取指令，执行ROM中的引导程序（先进行硬件自检，再开机）</li>
<li>将磁盘的第一块–主引导记录读入内存，执行磁盘引导程序，扫描分区表</li>
<li>从活动分区（又称主分区，即安装了操作系统的分区）读入分区引导记录，执行其中的程序</li>
<li>从根目录下找到完整的操作系统初始化程序（启动管理器）并执行，完成“开机”的一系列动作</li>
</ol>
<h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><p>虚拟机：使用虚拟技术，将一台物理机器虚拟化为堕胎虚拟机器，每个虚拟机器都可以独立运行一个操作系统</p>
<ul>
<li>第一类VMM：直接运行在硬件上</li>
<li>第二类VMM：运行在宿主操作系统上<br><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/VMM.png"></li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2024/08/31/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<ul>
<li>绝对装入：在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标地址。装入程序按照装入模块中的地址，将程序和数据装入内存。  </li>
<li>静态重定位：又称可重定位装入。编译、链接后的装入模块的地址是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址而言的逻辑地址。</li>
<li>动态重定位：又称动态运行时装入。编译、链接后的装入模块的地址是从0开始的，并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到程序真正要执行时才进行。<br>链接的三种方式：</li>
<li>静态链接：装入前链接成一个完整装入模块</li>
<li>装入时动态链接：运行前边装入边链接</li>
<li>运行时动态链接：运行时需要目标模块才装入并链接<br>内存保护方法：</li>
<li>采用重定位寄存器、界地址寄存器进行越界检查</li>
<li>设置上下限寄存器<br>覆盖技术的思想：将程序分为多个段。常用的段常驻内存，不常用的段在需要时才调入内存</li>
</ul>
]]></content>
  </entry>
</search>
